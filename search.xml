<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【面经】暑期实习系列</title>
    <url>/2020/04/21/%E3%80%90%E9%9D%A2%E7%BB%8F%E3%80%91%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="美团一面"><a href="#美团一面" class="headerlink" title="美团一面"></a>美团一面</h1><h2 id="视频面试-0404-15-00-65min"><a href="#视频面试-0404-15-00-65min" class="headerlink" title="视频面试 0404 15:00 65min"></a>视频面试 0404 15:00 65min</h2><p>1.说说你常用的集合<br>2.hashmap的实现<br>3.hashtable的实现<br>4.hashmap和concurrenthashmap的put方法<br>5.concurrenthashmap为什么能实现同步，和hashtable有啥区别<br>6.Arraylist和linkedlist的实现和场景<br>7.进程与线程<br>8.你遇到的并发问题<br>9.用过的线程池举例 线程池参数介绍<br>10.java内存模型<br>11.垃圾收集原理 gc算法了解吗<br>12.MyISAM和InnoDB InnoDB实现的数据结构<br>13.B树和B+树区别<br>14.MySQL索引<br>15.Zookeeper<br>16.spring的IOC和AOP了解吗<br>17.动态代理原理<br>18.TCP三次握手 两次行吗<br>19.TopK</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>算是自己第一次的面试，很感激这个面试官，从基础到底层，循序渐进地深挖。底层基本很难回答好，面试后感觉自己受到了暴击2333<br>本以为凉了，却意外过了。使得后来的自己莫名增添了蜜汁自信+无限的厚脸皮hhh</p>
<h1 id="美团二面"><a href="#美团二面" class="headerlink" title="美团二面"></a>美团二面</h1><h2 id="视频面试-0408-19-00-65min"><a href="#视频面试-0408-19-00-65min" class="headerlink" title="视频面试 0408 19:00 65min"></a>视频面试 0408 19:00 65min</h2><p>完全围绕项目展开：<br>从框架图流程图-&gt; 分析源码-&gt; 扩展场景和功能。</p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>自己第一次感受到了发散性思维有多重要，开始学会了对自己的项目去做更广阔的思考，甚至开始猜测哪些地方会成为面试官感兴趣的点，提前做好了各种预案。<br>美团二面结束后，迟迟未收到结果。备胎了11天后，还是收到了感谢信。但给当时稚嫩无比的自己带来了极大的提升。感恩美团的面试官们。</p>
<h1 id="阿里一面"><a href="#阿里一面" class="headerlink" title="阿里一面"></a>阿里一面</h1><h2 id="电话面试-0414-10-27-74min"><a href="#电话面试-0414-10-27-74min" class="headerlink" title="电话面试 0414 10:27 74min"></a>电话面试 0414 10:27 74min</h2><ol>
<li>【代码】数组部分和</li>
<li>【代码】层序遍历</li>
<li>进程和线程 </li>
<li>linux调用进程和线程的方式 【不懂</li>
<li>进程间通信</li>
<li>Volatile</li>
<li>线程池</li>
<li>线程安全的list接口 自己怎么实现</li>
<li>元空间</li>
<li>垃圾收集算法 触发条件</li>
<li>NIO</li>
<li>mySQl索引 B树 B+树</li>
<li>事务隔离级别 原理</li>
<li>你通信的，网络应该很好 【小朋友我有很多问号</li>
<li>TCP粘包</li>
<li>实际网络中大规模拥塞怎么处理</li>
<li>聊项目</li>
<li>用过阿里的产品做开发吗 【夸了波druid</li>
</ol>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>一场猝不及防的电话突袭。表现尚可，被夸基础好，但也被diss笔试没做好，建议加强算法和数据结构。<br>在沟通的过程中，感觉一面应该稳了的，但也深知自己二三面必然举步维艰了。然而一面几天后直接“被回绝”+新增“简历评估中”。<br>着实懵逼了。真不懂阿里的操作了。看了论坛和牛客后，不知道自己算不算被KPI了，因为内推人是随便找的+对方告诉自己先别做性格测试，后来发现不做性格测试，就永远能被“被回绝”+新增“简历评估中”……唉菜是原罪呜呜呜。</p>
<h1 id="腾讯一面-第一次"><a href="#腾讯一面-第一次" class="headerlink" title="腾讯一面 第一次"></a>腾讯一面 第一次</h1><h2 id="视频面试-0415-11-00-30min"><a href="#视频面试-0415-11-00-30min" class="headerlink" title="视频面试 0415 11:00 30min"></a>视频面试 0415 11:00 30min</h2><p>1.自我介绍<br>2.介绍Wi-Fi人体感知<br>3.介绍CNN和自动编码器<br>4.介绍卷积运算<br>5.介绍商城秒杀平台<br>6.计网一题<br>7.排序算法及其时间复杂度<br>8.算法一题<br>9.进程线程协程<br>10.编译原理【没学过<br>11.cpp【先说用得少不太记得了hhh<br>12.垃圾回收<br>13.通信专业学计算机？<br>14.对转go或者做全栈的看法</p>
<h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>原本的一面面试官有事，于是临时换了个人来面。因为不是正式面试官，所以每个方面都只问一个题，有丶像简历面，看你知识面。交谈过程中还是挺融洽的。</p>
<h1 id="腾讯一面-第二次"><a href="#腾讯一面-第二次" class="headerlink" title="腾讯一面 第二次"></a>腾讯一面 第二次</h1><h2 id="视频面试-0415-17-00-60min"><a href="#视频面试-0415-17-00-60min" class="headerlink" title="视频面试 0415 17:00 60min"></a>视频面试 0415 17:00 60min</h2><p>1.【代码】无符号数中1的个数<br>2.【代码】返回两条单向链表的交点<br>3.【代码】爬楼梯<br>4.【代码】最长下降子序列长度<br>5.项目</p>
<h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>在给面试官讲自己的解题思路时，面试官采用了2倍速的压力面试法，自己没意识到这是在给自己压力，所以整个讲题过程确实有点懵了……后来讲项目时渐渐缓过来。<br>事后回顾面试过程，反复思考自己为何会懵懵的，才意识到大概率是2倍速的原因了。以后再次遇到应该学会镇定点了。</p>
<h1 id="腾讯二面"><a href="#腾讯二面" class="headerlink" title="腾讯二面"></a>腾讯二面</h1><h2 id="视频面试-0416-11-00-15min"><a href="#视频面试-0416-11-00-15min" class="headerlink" title="视频面试 0416 11:00 15min"></a>视频面试 0416 11:00 15min</h2><p>1.项目<br>2.HTTP2.0了解吗<br>3.关于这种知识是从哪些渠道获取的<br>4.迪杰斯特拉算法，结合滴滴打车<br>5.找中位数 【快排取一半的范围</p>
<h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>第一次面试过程如此迅速，导致自己也不知道是被认可了还是要凉了。直到后来看到官网更新为hr面+一面面试官加微信告知连过两面了。</p>
<h1 id="腾讯HR面"><a href="#腾讯HR面" class="headerlink" title="腾讯HR面"></a>腾讯HR面</h1><h2 id="电话面试-0417-16-00-19min"><a href="#电话面试-0417-16-00-19min" class="headerlink" title="电话面试 0417 16:00 19min"></a>电话面试 0417 16:00 19min</h2><p>1.项目介绍<br>2.最自豪的项目<br>3.学校里参加的非专业的活动<br>4.啥时候能实习<br>5.拿了啥offer<br>6.后台有了解吗  </p>
<h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><p>是个HR小哥哥，声音听起来很舒服，显然经过专业培训。</p>
<h1 id="网易互娱"><a href="#网易互娱" class="headerlink" title="网易互娱"></a>网易互娱</h1><h2 id="视频面试-0420-14-00-50min"><a href="#视频面试-0420-14-00-50min" class="headerlink" title="视频面试 0420 14:00 50min"></a>视频面试 0420 14:00 50min</h2><p>1.通信的，硬件应该不错吧<br>2.信道切换介绍下<br>3.信道切换的目的<br>4.驱动的原理<br>5.linux命令 比如free 还用过啥 用vim还是ide<br>6.redis持久化过程<br>7.操作系统的不知道啥？？？<br>8.文件描述符<br>9.socket编程<br>10.写一个java到运行会发生啥<br>11.网络的不知道啥子<br>12.tcp udp区别<br>13.长连接<br>14.tcp后 长时间不连接会发生什么 不知道？那你随便扯扯。扯完了？那你后面再看看<br>15.python用过xxx模式吗 设计模式的一种好像 对不起没有<br>16.python写过多进程和多线程吗 对不起没有<br>17.python异常处理<br>18.终于问了个java：多态知道吗 写一个<br>19.中序遍历 非递归<br>20.智力题 类似田忌赛马  </p>
<h2 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h2><p>面试官似乎一直想和我聊硬件。整个过程其实是有点懵的，一度怀疑自己是不是面的网易，还是面了啥硬件公司了。</p>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法题】打家劫舍</title>
    <url>/2020/04/20/%E7%AE%97%E6%B3%95%E9%A2%98%E3%80%91%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    <content><![CDATA[<h1 id="打家劫舍汇总"><a href="#打家劫舍汇总" class="headerlink" title="打家劫舍汇总"></a>打家劫舍汇总</h1><p><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">数组</a><br><a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">环路</a><br><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">二叉树</a></p>
<a id="more"></a>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>思路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、任何一个索引能偷到的最大钱的状态可以定义为：</span><br><span class="line">【当前索引选择不偷】当前索引能偷到的最大钱数 &#x3D; MAX（前一个索引不偷， 前一个索引偷）</span><br><span class="line">【当前索引选择偷】当前索引能偷到的最大钱数 &#x3D;  前一个索引不偷 + 当前索引的钱数</span><br><span class="line"></span><br><span class="line">2、我们使用一个大小为 2 的数组来表示 int[] res &#x3D; new int[2]。0 代表不偷，1 代表偷。</span><br><span class="line"></span><br><span class="line">3、表示为公式如下</span><br><span class="line">res[0] &#x3D; Math.max(res[0], res[1])</span><br><span class="line">root[1] &#x3D; res[0] + val;</span><br></pre></td></tr></table></figure>
<p>详解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helpRob(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helpRob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res_0 = <span class="number">0</span>, res_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> res_0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = res_0;</span><br><span class="line">            res_0 = Math.max(res_0, res_1);</span><br><span class="line">            res_1 = tmp + nums[i]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(res_0, res_1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="环路"><a href="#环路" class="headerlink" title="环路"></a>环路</h2><p>思路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.将环路分成两种情况：</span><br><span class="line">【第0个开始取】则对应成上述数组问题中nums[0, len-2]</span><br><span class="line">【第1个开始取】则对应成上述数组问题中nums[1, len-1]</span><br><span class="line"></span><br><span class="line">2.采用两种情况下，同时进行dp。</span><br><span class="line"></span><br><span class="line">3.int[] zero &#x3D; new int[2]。表示从第0个开始取，0 代表不偷，1 代表偷。</span><br><span class="line">  int[] one &#x3D; new int[2]。 表示从第1个开始取，0 代表不偷，1 代表偷。</span><br></pre></td></tr></table></figure>
<p>详解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helpRob(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helpRob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] zero = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span>[] one = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        zero[<span class="number">1</span>] =  nums[<span class="number">0</span>];                           <span class="comment">//zero[]从第0个开始取</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>; i ++) &#123;  <span class="comment">//在[1，len-2]中进行两种dp</span></span><br><span class="line">            <span class="keyword">int</span> tmp = zero[<span class="number">0</span>];</span><br><span class="line">            zero[<span class="number">0</span>] = Math.max(zero[<span class="number">0</span>], zero[<span class="number">1</span>]);</span><br><span class="line">            zero[<span class="number">1</span>] = tmp + nums[i];</span><br><span class="line">            tmp = one[<span class="number">0</span>];</span><br><span class="line">            one[<span class="number">0</span>] = Math.max(one[<span class="number">0</span>], one[<span class="number">1</span>]);</span><br><span class="line">            one[<span class="number">1</span>] = tmp + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tmp = one[<span class="number">0</span>];                           <span class="comment">//one[]还需讨论第len-1个</span></span><br><span class="line">        one[<span class="number">0</span>] = Math.max(one[<span class="number">0</span>], one[<span class="number">1</span>]);</span><br><span class="line">        one[<span class="number">1</span>] = tmp + nums[nums.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(zero[<span class="number">0</span>],zero[<span class="number">1</span>]), Math.max(one[<span class="number">0</span>],one[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>思路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、每个节点可选择偷或者不偷两种状态，根据题目意思，相连节点不能一起偷。</span><br><span class="line">【当前节点选择不偷】当前节点能偷到的最大钱数 &#x3D; 左孩子偷或不偷时能偷到的最多的钱 + 右孩子偷或不偷时能偷到的最多的钱</span><br><span class="line">【当前节点选择偷】当前节点能偷到的最大钱数 &#x3D; 左孩子选择自己不偷时能得到的钱 + 右孩子选择不偷时能得到的钱 + 当前节点的钱数</span><br><span class="line"></span><br><span class="line">2、我们使用一个大小为 2 的数组来表示 int[] res &#x3D; new int[2]。0 代表不偷，1 代表偷。</span><br><span class="line"></span><br><span class="line">3、表示为公式如下</span><br><span class="line">root[0] &#x3D; Math.max(rob(root.left)[0], rob(root.left)[1]) + Math.max(rob(root.right)[0], rob(root.right)[1])</span><br><span class="line">root[1] &#x3D; rob(root.left)[0] + rob(root.right)[0] + root.val;</span><br></pre></td></tr></table></figure>
<p>详解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = helpRob(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] helpRob(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span>[] left = helpRob(root.left);</span><br><span class="line">        <span class="keyword">int</span>[] right = helpRob(root.right);</span><br><span class="line">        res[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        res[<span class="number">1</span>] = left[<span class="number">0</span>] + right[<span class="number">0</span>] + root.val;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/zangdaiyang1991/article/details/94561641" target="_blank" rel="noopener">CSDN 打家劫舍III(Java)</a></p>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>LC</tag>
        <tag>DP</tag>
        <tag>打家劫舍</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法题】排序算法</title>
    <url>/2020/04/13/%E3%80%90%E7%AE%97%E6%B3%95%E9%A2%98%E3%80%91%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><img src="/2020/04/13/%E3%80%90%E7%AE%97%E6%B3%95%E9%A2%98%E3%80%91%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/pasted-28.png" class>  
<a id="more"></a> 
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j ++) &#123; <span class="comment">//在n-i个数里两两交换，将第i+1大的数归位</span></span><br><span class="line">               <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                   <span class="keyword">int</span> tmp = arr[j + <span class="number">1</span>];</span><br><span class="line">                   arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                   arr[j] = tmp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"bubble:"</span>);</span><br><span class="line">       Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selction</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class="line">           <span class="keyword">int</span> inx = i;  <span class="comment">//最小值的索引</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j ++) &#123;  <span class="comment">//不断在n-i个数里找出第i小的数的位置，并将其归位</span></span><br><span class="line">               <span class="keyword">if</span> (arr[j] &lt; arr[inx]) inx = j;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (inx != i) &#123;</span><br><span class="line">               <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">               arr[i] = arr[inx];</span><br><span class="line">               arr[inx] = tmp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"selction:"</span>);</span><br><span class="line">       Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertion</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i ++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j - <span class="number">1</span> &gt;= <span class="number">0</span>; j --) &#123; <span class="comment">//在第二层循环里把arr[i]往前插入</span></span><br><span class="line">               <span class="keyword">if</span> (arr[j] &lt; arr[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                   <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                   arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">                   arr[j-<span class="number">1</span>] = tmp;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"insertion:"</span>);</span><br><span class="line">       Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Shell</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> beta = arr.length / <span class="number">2</span>;     <span class="comment">//不断用二分法取增量</span></span><br><span class="line">       <span class="keyword">while</span> (beta &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; beta; i ++) &#123;   <span class="comment">//beta下对应的组数</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = i + beta; j &lt; arr.length; j += beta) &#123;  <span class="comment">//每组采用插入排序</span></span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k - beta &gt;= <span class="number">0</span>; k -= beta) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[k] &lt; arr[k - beta]) &#123;</span><br><span class="line">                           <span class="keyword">int</span> tmp = arr[k];</span><br><span class="line">                           arr[k] = arr[k - beta];</span><br><span class="line">                           arr[k - beta] = tmp;</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           beta /= <span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"shell:"</span>);</span><br><span class="line">       Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] swap(Integer[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)  &#123;</span><br><span class="line">       <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">       arr[i] = arr[j];</span><br><span class="line">       arr[j] = tmp;</span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qSort</span><span class="params">(Integer[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> i = l, j = R;</span><br><span class="line">       <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">           <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= arr[i]) j --;</span><br><span class="line">           arr = swap(arr, i, j);</span><br><span class="line">           <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= arr[i]) i ++;</span><br><span class="line">           arr = swap(arr, i, j);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (i &gt; l + <span class="number">1</span>) qSort(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (j &lt; R - <span class="number">1</span>) qSort(arr, j + <span class="number">1</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Quick</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">       qSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">"quick:"</span>);</span><br><span class="line">       Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeTo</span><span class="params">(Integer[] arr, <span class="keyword">int</span> first, <span class="keyword">int</span> middle, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = first, j = middle + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    Integer[] tmp = <span class="keyword">new</span> Integer[arr.length];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= middle &amp;&amp; j &lt;= last) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) tmp[k ++] = arr[i ++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++] = arr[j ++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= middle) tmp[k ++] = arr[i ++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= last) tmp[k ++] = arr[j ++];</span><br><span class="line">    System.out.println(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; k; ii ++) arr[first+ii] = tmp[ii];</span><br><span class="line">    System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mSort</span><span class="params">(Integer[] arr, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (first + last) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; last) &#123;</span><br><span class="line">        mSort(arr, first, middle);</span><br><span class="line">        mSort(arr,middle+<span class="number">1</span>, last);</span><br><span class="line">        mergeTo(arr, first, middle, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    mSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"merge:"</span>);</span><br><span class="line">    Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(Integer[] arr, <span class="keyword">int</span> len, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = i, tmp = arr[i], idx = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx + <span class="number">1</span> &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[idx] &lt; arr[idx + <span class="number">1</span>]) idx ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[idx] &gt; tmp) &#123;</span><br><span class="line">            arr[k] = arr[idx];</span><br><span class="line">            k = idx;</span><br><span class="line">            idx = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[k] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Heap</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造初始堆,从第一个非叶子节点开始调整,左右孩子节点中较大的交换到父节点中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (arr.length) / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapAdjust(arr, arr.length, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序，将最大的节点放在堆尾，然后从根节点重新调整</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">        heapAdjust(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"heap:"</span>);</span><br><span class="line">    Arrays.asList(arr).forEach(a -&gt; System.out.println(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/w3cnote/sort-algorithm-summary.html" target="_blank" rel="noopener">菜鸟教程——排序算法</a><br><a href="https://baijiahao.baidu.com/s?id=1631316781107113184&wfr=spider&for=pc" target="_blank" rel="noopener">经典排序算法全攻略</a><br><a href="https://blog.csdn.net/qq_43152052/article/details/100078825" target="_blank" rel="noopener">八大排序算法的稳定性及时间复杂度</a></p>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法题】股票买卖</title>
    <url>/2020/04/11/%E3%80%90%E7%AE%97%E6%B3%95%E9%A2%98%E3%80%91%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/</url>
    <content><![CDATA[<h1 id="股票买卖汇总"><a href="#股票买卖汇总" class="headerlink" title="股票买卖汇总"></a>股票买卖汇总</h1><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">当只能进行一次交易时</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">当可以进行无穷多次交易时</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">当可以进行两次交易时</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">当可以进行k次交易</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">当可以进行无穷多次交易且含冷冻期</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">当可以进行无穷多次交易且需手续费</a><br> <a id="more"></a> </p>
<h2 id="状态定义"><a href="#状态定义" class="headerlink" title="状态定义"></a>状态定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][k][0 or 1]</span><br><span class="line">0 &lt;&#x3D; i &lt;&#x3D; n-1, 1 &lt;&#x3D; k &lt;&#x3D; K</span><br><span class="line">n 为天数，大 K 为最多交易数</span><br><span class="line">此问题共 n × K × 2 种状态，全部穷举就能搞定。</span><br><span class="line"></span><br><span class="line">for 0 &lt;&#x3D; i &lt; n:</span><br><span class="line">    for 1 &lt;&#x3D; k &lt;&#x3D; K:</span><br><span class="line">        for s in &#123;0, 1&#125;:</span><br><span class="line">            dp[i][k][s] &#x3D; max(buy, sell, rest)</span><br></pre></td></tr></table></figure>
<h2 id="状态转移"><a href="#状态转移" class="headerlink" title="状态转移"></a>状态转移</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][k][0] &#x3D; max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 sell      )</span><br><span class="line"></span><br><span class="line">解释：今天我没有持有股票，有两种可能：</span><br><span class="line">要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；</span><br><span class="line">要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</span><br><span class="line"></span><br><span class="line">dp[i][k][1] &#x3D; max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 buy         )</span><br><span class="line"></span><br><span class="line">解释：今天我持有着股票，有两种可能：</span><br><span class="line">要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；</span><br><span class="line">要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。</span><br></pre></td></tr></table></figure>
<p>化简：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base case：</span><br><span class="line">dp[-1][k][0] &#x3D; dp[i][0][0] &#x3D; 0</span><br><span class="line">dp[-1][k][1] &#x3D; dp[i][0][1] &#x3D; -infinity</span><br><span class="line"></span><br><span class="line">状态转移方程：</span><br><span class="line">dp[i][k][0] &#x3D; max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</span><br><span class="line">dp[i][k][1] &#x3D; max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</span><br></pre></td></tr></table></figure>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="当只能进行一次交易时"><a href="#当只能进行一次交易时" class="headerlink" title="当只能进行一次交易时"></a>当只能进行一次交易时</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入: [7,1,5,3,6,4]</span></span><br><span class="line"><span class="comment">输出: 5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, - prices[i]);  <span class="comment">//只扣一次钱</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="当可以进行无穷多次交易时"><a href="#当可以进行无穷多次交易时" class="headerlink" title="当可以进行无穷多次交易时"></a>当可以进行无穷多次交易时</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入: [7,1,5,3,6,4]</span></span><br><span class="line"><span class="comment">输出: 7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 = - prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, dp_i_0 - prices[i]);  <span class="comment">//加减动态关联</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="当可以进行2次交易时"><a href="#当可以进行2次交易时" class="headerlink" title="当可以进行2次交易时"></a>当可以进行2次交易时</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入: [3,3,5,0,0,3,1,4]</span></span><br><span class="line"><span class="comment">输出: 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[<span class="number">0</span>][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[<span class="number">0</span>][j][<span class="number">1</span>] = - prices[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][j][<span class="number">0</span>], dp[i-<span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                    dp[i][j][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][j][<span class="number">1</span>], dp[i-<span class="number">1</span>][j-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.length-<span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="当可以进行K次交易时"><a href="#当可以进行K次交易时" class="headerlink" title="当可以进行K次交易时"></a>当可以进行K次交易时</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入: [3,2,6,5,0,3], k = 2</span></span><br><span class="line"><span class="comment">输出: 7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; prices.length / <span class="number">2</span>)&#123;<span class="comment">//买入和卖出不能在一天 故至多有n/2次交易；当k&gt;n/2 相当于k为无限大，转为题2.2</span></span><br><span class="line">            <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> dp_i_1 = - prices[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">                dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">                dp_i_1 = Math.max(dp_i_1, dp_i_0 - prices[i]);  <span class="comment">//加减动态关联</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dp_i_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][k+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                        dp[<span class="number">0</span>][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                        dp[<span class="number">0</span>][j][<span class="number">1</span>] = - prices[<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][j][<span class="number">0</span>], dp[i-<span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                        dp[i][j][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][j][<span class="number">1</span>], dp[i-<span class="number">1</span>][j-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[prices.length-<span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="当可以进行无穷多次交易且含冷冻期"><a href="#当可以进行无穷多次交易且含冷冻期" class="headerlink" title="当可以进行无穷多次交易且含冷冻期"></a>当可以进行无穷多次交易且含冷冻期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 =  - prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = dp_i_0;  <span class="comment">//昨天的数据</span></span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, prev - prices[i]);  <span class="comment">//前天的数据</span></span><br><span class="line">            prev = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="当可以进行无穷多次交易且含手续费"><a href="#当可以进行无穷多次交易且含手续费" class="headerlink" title="当可以进行无穷多次交易且含手续费"></a>当可以进行无穷多次交易且含手续费</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_i_1 =  - prices[<span class="number">0</span>] - fee;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, dp_i_0 - prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_44024733/article/details/102641925" target="_blank" rel="noopener">动态规划——股票系列问题</a></p>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>LC</tag>
        <tag>股票买卖</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】数据访问</title>
    <url>/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="dao层简介"><a href="#dao层简介" class="headerlink" title="dao层简介"></a>dao层简介</h1><ul>
<li><strong>JDBC</strong>  <ul>
<li>JDBC（Java DataBase Connectivity ，java数据库连接技术）是<font color="#FF0000">数据库的统一接口标准</font>，是java连接数据库操作的原生接口。</li>
<li>JDBC对Java程序员而言是<font color="#FF0000">API</font>，对实现与数据库连接的服务提供商而言是<font color="#FF0000">接口模型</font>。作为API，JDBC为程序开发提供标准的接口，并为各个数据库厂商及第三方中间件厂商<font color="#FF0000">实现与数据库的连接</font>提供了标准方法。</li>
<li>一句话概括：jdbc是<font color="#FF0000">所有框架操作数据库</font>都必须要用的，由数据库厂商提供，但是为了方便java程序员调用各个数据库，各个数据库厂商都要实现jdbc接口用来访问各种数据库 。<a id="more"></a>  </li>
</ul>
</li>
<li><strong>ORM</strong>  <ul>
<li>ORM（Object Relational Mapping，对象关系映射）是<font color="#FF0000">数据库的表</font>和<font color="#FF0000">POJO</font>（Plain Ordinary Java Object，简单Java对象）的映射关系模型。</li>
<li>我们通过这层映射关系就可以简单迅速地把<font color="#FF0000">数据库的表的数据</font>转化为<font color="#FF0000">POJO</font>。</li>
<li>取代了JDBC，所有的ORM模型<font color="#FF0000">都是基于JDBC</font>进行封装的，不同ORM模型（Hibernate、Spring Data JPA、open JPA）对JDBC封装的强度是不一样的。</li>
<li>ORM是一种思想，是插入在<font color="#FF0000">应用程序</font>与<font color="#FF0000">JDBC API</font>之间的一个中间层，JDBC并不能很好地支持面向对象的程序设计，ORM解决了这个问题，通过JDBC将字段高效的与对象进行映射。即与<font color="#FF0000">应用程序 - ORM - JDBC - 数据库</font>。</li>
</ul>
</li>
<li><strong>JPA</strong><ul>
<li>JPA（JAVA Persistence API，持久规范）是一套基于ORM对象关系型数据库映射的规范。内部是由一系列的<font color="#FF0000">接口和抽象类</font>构成。不用写sql语句，面向对象的。</li>
<li>JPA 通过注解描述<font color="#FF0000">对象－关系表</font>的映射关系，并将运行期的实体对象持久化到数据库中。</li>
<li>JPA 规范本质上就是一种基于ORM的规范，注意不是ORM框架——因为JPA<font color="#FF0000">并未提供 ORM 实现</font>，它只是制订了一些规范，提供了一些编程的 API 接口，但具体实现则由服务厂商来提供实现，如Hibernate、TopLink、open JPA。其关系与<font color="#FF0000">应用程序 - JPA规范 - Hibernate等（JPA实现） - 数据库</font>。</li>
</ul>
</li>
<li><strong>Hibernate</strong>   <ul>
<li>Hibernate是一种<font color="#FF0000">全自动的ORM框架</font>，只需提供<font color="#FF0000">POJO和映射关系</font>；也是一种<font color="#FF0000">JPA实现</font>，依照的JPA规范。</li>
<li>Hibernate对JDBC进行了非常轻量级的对象封装，是建立在<font color="#FF0000">POJO</font>和<font color="#FF0000">数据库表模型</font>的直接映射关系上的。</li>
<li>Hibernate 可以自动生成 SQL 语句，自动执行，可以直接使用对象编程思维来操纵数据库。</li>
<li>只适用于场景不太复杂，要求性能不太苛刻的时候。</li>
</ul>
</li>
<li><strong>Mybatis</strong>  <ul>
<li>Mybatis是一种<font color="#FF0000">半自动映射的框架，</font>需要手动匹配提供<font color="#FF0000">POJO、SQL和映射关系</font>。不是依照的JPA规范。</li>
<li>Mybatis拥有动态列，动态表名，存储过程支持，同时提供了简易的缓存、日志、级联。</li>
<li>Mybatis是一个java持久层框架，它封装少、高性能·可优化、维护简单等优点成为了目前java移动互联网网站服务的首选持久层框架，它特别适合分布式和大数据网络数据库编程。</li>
</ul>
</li>
<li><strong>Spring Boot JPA</strong>   <ul>
<li>Spring Boot JPA是Spring提供的一套简化JPA开发的框架，按照约定好的【方法命名规则】写<font color="#FF0000">Dao层接口</font>，就可以在<font color="#FF0000">只声明接口、不写接口实现</font>的情况下，实现对数据库的访问和操作。</li>
<li>同时提供了很多除了CRUD之外的功能，如分页、排序、复杂查询等等。</li>
<li>Spring Boot JPA是对JPA规范的再次抽象，底层还是用的实现JPA的Hibernate技术。即<font color="#FF0000">应用程序 - JPA规范 - Spring Boot JPA框架 - Hibernate框架（JPA实现） - 数据库</font>。</li>
</ul>
</li>
<li><strong>JDBC开发步骤（了解）</strong>  <ul>
<li>配置jdbc：连接数据库，注册驱动和数据库信息</li>
<li>操作Connection，打开Statement对象</li>
<li>通过Statement对象执行SQL，返回结果到ResultSet对象</li>
<li>使用ResultSet读取数据，然后通过代码转化为具体的POJO对象</li>
<li>关闭数据库相关的资源</li>
</ul>
</li>
<li><strong>JDBC Template开发步骤（掌握）</strong>  <ul>
<li>配置jdbc：连接数据库，注册驱动和数据库信息</li>
<li><font color="#FF0000">@Autowired装配JdbcTemplate</font>：使其传入连接池对象</li>
<li>提供SQL语句和占位符的值，<font color="#FF0000">调用 execute()执行 DDL、update()执行 DML、queryXxx()执行DQL</font>等方法，得到封装好的查询结果集</li>
</ul>
</li>
<li><strong>Hibernate开发步骤（了解）</strong><br>Hibernate是将数据库中的数据表映射为持久层的Java对象</li>
<li><strong>Mybatis开发步骤（掌握）</strong>  <ul>
<li>配置jdbc：连接数据库，注册驱动和数据库信息</li>
<li>创建Java bean实体类</li>
<li>开发mapper接口（相当于Dao接口）</li>
<li><font color="#FF0000">使用配置文件或者注解，将sql语句中的输入参数和输出参数映射为Java bean对象</font></li>
</ul>
</li>
<li><strong>Spring Boot JPA开发步骤（掌握）</strong>  <ul>
<li>配置jdbc：连接数据库，注册驱动和数据库信息</li>
<li><font color="#FF0000">创建Java bean实体类，配置bean和数据表的映射</font></li>
<li>利用Spring Data JPA的Dao的接口编写规则<font color="#FF0000">声明接口</font></li>
<li>配置JPA</li>
</ul>
</li>
</ul>
<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="配置JDBC获取数据源"><a href="#配置JDBC获取数据源" class="headerlink" title="配置JDBC获取数据源"></a>配置JDBC获取数据源</h2><ul>
<li><strong>前期准备</strong><ul>
<li>先到 <a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox官网</a>安装虚拟机，导入<a href="https://www.jianshu.com/p/e13ee0e3b0a7" target="_blank" rel="noopener">.OVA文件的centos</a>，安装与VirtualBox版本对应的<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">Oracle VM VirtualBox Extension Pack</a> 。如果别人的centos密码未知，可<a href="https://www.cnblogs.com/jfaith/p/12145494.html" target="_blank" rel="noopener">自行修改密码</a>。</li>
<li>为了方便可以设置好虚拟机网络后，可利用虚拟机的ip地址在客户端SmarTTY与服务器进行交互。</li>
<li>检查好内核版本后，安装Docker。如果遇到linux的内核中的SELinux不支持 overlay2 graph driver，导致Docker启动不了，可<a href="https://www.jianshu.com/p/220ba71aeddb" target="_blank" rel="noopener">在Docker里禁用selinux</a>。 - 安装MySQL镜像，根据镜像启动容器，做端口映射。</li>
<li>下载安装 <a href="https://blog.csdn.net/qq1147093833/article/details/80624667?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Navicat Premium 12</a> 访问MySQL。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>配置JDBC</strong>  <ul>
<li>基于Spring Initializr创建项目，加入Web、JDBC、MySQL等依赖。   <img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-0.png" class>  </li>
<li>在MySQL中3306端口的镜像下，新建一个数据库jdbc：  <img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-1.png" class>  </li>
<li>在配置文件<code>application.yml</code>中写入要连接的数据库：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.100:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></li>
<li>在测试类中写入：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot07DataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//class com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        <span class="comment">//HikariProxyConnection@865430810 wrapping com.mysql.cj.jdbc.ConnectionImpl@2e1ddc90</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-2.png" class>   </li>
<li>可以得到数据源为：<code>class com.zaxxer.hikari.HikariDataSource</code>，数据源的连接池为：<code>HikariProxyConnection@865430810 wrapping com.mysql.cj.jdbc.ConnectionImpl@2e1ddc90</code>。</li>
</ul>
</li>
</ul>
<h2 id="源码：JDBC自动配置原理"><a href="#源码：JDBC自动配置原理" class="headerlink" title="源码：JDBC自动配置原理"></a>源码：JDBC自动配置原理</h2><p>在<code>External libraries</code>找到Spring Boot的自动配置依赖，在<code>org.springframework.boot.autoconfigure</code>下找到<code>jdbc</code>。其中的<code>DataSourceConfiguration</code>，<code>DataSourceInitializerInvoker</code>，<code>JdbcTemplateAutoConfiguration</code>和<code>JdbcTemplateConfiguration</code>需要关注。</p>
<ul>
<li><strong><font color="#FF0000">DataSourceConfiguration</font>：数据源的【自动配置/手动自定义】</strong><br>参考<code>DataSourceConfiguration</code>，根据配置创建数据源，故可以在配置文件<code>application.yml</code>中利用<br><code>spring.datasource.type</code>指定自定义的数据源类型:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;DataSource<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">name</span> </span>= &#123;<span class="string">"spring.datasource.type"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    Generic() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
此外，追溯<code>DataSourceProperties</code>类的<code>initializeDataSourceBuilder</code>方法，其返回值为<code>DataSourceBuilder</code>对象。<br>在<code>DataSourceBuilder</code>类中，定义了一个静态常量<code>private static final String[] DATA_SOURCE_TYPE_NAMES = new String[]{&quot;com.zaxxer.hikari.HikariDataSource&quot;, &quot;org.apache.tomcat.jdbc.pool.DataSource&quot;, &quot;org.apache.commons.dbcp2.BasicDataSource&quot;};</code>。<br>由此可知默认是用<code>com.zaxxer.hikari.HikariDataSource</code>作为数据源的。</li>
<li><strong><font color="#FF0000">DataSourceInitializerInvoker</font>：SpringBoot2通过jdbc【创建/初始化】数据表</strong><br><code>DataSourceInitializerInvoker</code><br>是一个实现了<code>ApplicationListener</code>和<code>InitializingBean</code>两个接口的类，多次使用了<code>DataSourceInitializer</code>的对象。<br>在<code>DataSourceInitializer</code>类中，存在<code>createSchema</code>和<code>initSchema</code>方法，分别用于建表和插入数据。二者都用到了<code>getScripts</code>和<code>runScripts</code>方法，且两个方法都传入了配置文件中的参数<code>propertyName：&quot;spring.datasource.schema&quot;</code>，故<font color="#FF0000">可以在配置文件<code>application.yml</code>中声明参数<code>&quot;spring.datasource.schema&quot;</code>【方法一】</font>，随后放在资源文件夹中即可使创建表单/插入数据的资源文件生效。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">getScripts</span><span class="params">(String propertyName, List&lt;String&gt; resources, String fallback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getResources(propertyName, resources, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String platform = <span class="keyword">this</span>.properties.getPlatform();</span><br><span class="line">        List&lt;String&gt; fallbackResources = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        fallbackResources.add(<span class="string">"classpath*:"</span> + fallback + <span class="string">"-"</span> + platform + <span class="string">".sql"</span>);</span><br><span class="line">        fallbackResources.add(<span class="string">"classpath*:"</span> + fallback + <span class="string">".sql"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getResources(propertyName, fallbackResources, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
可见获取<code>Scripts</code>的资源文件除了在配置文件中定义，<font color="#FF0000">还可以将其命名为<code>&quot;classpath*:&quot; + fallback + &quot;-&quot; + platform + &quot;.sql&quot;</code>或者<code>&quot;classpath*:&quot; + fallback + &quot;.sql&quot;</code>【方法二】</font>，随后放在资源文件夹中即可使创建表单/插入数据的资源文件生效。<br>其中<code>platform</code>为字符串<code>&quot;all&quot;</code>。<code>fallback</code>在在创建Schema时，即在<code>getSchema()</code>方法中为<code>schema</code>；在初始化Schema（插入数据）时，即<code>initSchema()</code>方法中为<code>data</code>。<br>因此，只需要在类路径下，建立<code>xxx-all.sql</code>或者<code>xxx.sql</code>，即可在对应的数据库中，找到新建的表。如图，成功建立表：  <img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-3.png" class>  

</li>
</ul>
<h2 id="利用JdbcTemplate操作数据库"><a href="#利用JdbcTemplate操作数据库" class="headerlink" title="利用JdbcTemplate操作数据库"></a>利用JdbcTemplate操作数据库</h2><p>利用<code>JdbcTemplateAutoConfiguration</code>和<code>JdbcTemplateConfiguration</code>自动配置了JdbcTemplate来操作数据库。<br>新建一个<code>HelloController</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"select * FROM person"</span>);</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时访问 <a href="http://localhost:8081/query" target="_blank" rel="noopener">http://localhost:8081/query</a> ，可以获取到表<code>person</code>的第一个数据：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-4.png" class>  

<h1 id="整合Druid数据源"><a href="#整合Druid数据源" class="headerlink" title="整合Druid数据源"></a>整合Druid数据源</h1><h2 id="导入Druid数据源"><a href="#导入Druid数据源" class="headerlink" title="导入Druid数据源"></a>导入Druid数据源</h2><p>从<a href="https://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a>，将druid的依赖添加到<code>pom.xml</code>中，并在<code>application.yml</code>中配置druid数据源：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>
<p>随后可以在测试类中查看是否引入成功:  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-5.png" class>   
<p>数据源为<code>class com.alibaba.druid.pool.DruidDataSource</code>，对应的连接池为<code>com.mysql.cj.jdbc.ConnectionImpl@2b2f5fcf</code>。</p>
<h2 id="绑定Druid数据源配置"><a href="#绑定Druid数据源配置" class="headerlink" title="绑定Druid数据源配置"></a>绑定Druid数据源配置</h2><p>在<code>application.yml</code>中写入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.100:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#   数据源其他配置（黄色是因为不在数据库中，因此不能绑定到配置里）</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="comment">#    filters: stat,wall,slf4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
<p>此时其他配置在<code>DataSourceProperties.java</code>中并不存在，因此无法绑定，需要在<code>/config</code>文件夹下写一个配置类<code>DruidConfig.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外还需要在<code>pom.xml</code>引入<code>log4j</code>。<br>此时，可以在测试类的连接池中进行debug，查看属性配置是否成功。  </p>
<h2 id="配置Druid的监控"><a href="#配置Druid的监控" class="headerlink" title="配置Druid的监控"></a>配置Druid的监控</h2><p>在<code>DruidConfig.java</code>中配置一个管理后台的Servlet和一个web监控的filter，并将二者注册到容器bean中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置Druid的监控</span></span><br><span class="line"><span class="comment">//1、配置一个管理后台的Servlet，访问地址localhost:8081/druid</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">	  <span class="comment">//把StatViewServlet()注册到bean，并处理"/druid/*"的所有请求</span></span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123"</span>);</span><br><span class="line">    initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">    initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.10.100"</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、配置一个web监控的filter，任何请求都需要通过filter实现监控，除了静态资源*.js,*.css，登录请求/druid/*</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    <span class="comment">// 注册WebStatFilter()实例	</span></span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置初始化参数，拦截除了"*.js,*.css,/druid/*"的所有请求</span></span><br><span class="line">    initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));<span class="comment">// 拦截所有请求：</span></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时运行主程序，访问 <a href="http://localhost:8081/druid" target="_blank" rel="noopener">http://localhost:8081/druid</a> 并用<code>ServletRegistrationBean</code>的初始化参数来登录：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-6.png" class>   
<p>随后，浏览器访问 <a href="http://localhost:8081/query" target="_blank" rel="noopener">http://localhost:8081/query</a> 进行操作数据库的请求，在<code>Web应用</code>选项下，成功用filter监控了此次请求：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-7.png" class>   
<p><code>SQL监控</code>也成功记录了此次SQL的操作记录：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-9.png" class>

<h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><h2 id="配置MyBatis"><a href="#配置MyBatis" class="headerlink" title="配置MyBatis"></a>配置MyBatis</h2><p>基于Spring Initializr创建项目，加入Web、JDBC、MySQL、MyBatis等依赖。   </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-10.png" class>  
<p>可以看出MyBatis的依赖不是spring boot官方出的，而是自己适配spring boot出的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对上述依赖右键选择<code>Diagrams</code>，可以看出mybatis的启动器引入了mybatis包、mybatis自动配置包、mybatis中间的整合包。  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-11.png" class>
<h2 id="引入druid数据源，并绑定配置"><a href="#引入druid数据源，并绑定配置" class="headerlink" title="引入druid数据源，并绑定配置"></a>引入druid数据源，并绑定配置</h2><p>新建一个数据库，名为mybatis：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-12.png" class>  
<p>在<code>application.yml</code>中写入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.100:3306/mybatis?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
<p>在<code>/config</code>文件夹下写一个配置类<code>DruidConfig.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet，访问地址localhost:8081/druid</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//把StatViewServlet()注册到bean，并处理"/druid/*"的所有请求</span></span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.10.100"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter，任何请求都需要通过filter实现监控，除了静态资源*.js,*.css，登录请求/druid/*</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        <span class="comment">// 注册WebStatFilter()实例</span></span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置初始化参数，拦截除了"*.js,*.css,/druid/*"的所有请求</span></span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));<span class="comment">// 拦截所有请求：</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>pom.xml</code>引入<code>log4j</code>。<br>随后访问 <a href="http://localhost:8082/druid" target="_blank" rel="noopener">http://localhost:8082/druid</a> ，成功来到控制台页面。</p>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>在<code>/resources</code>文件夹下新建<code>sql</code>文件夹，将<code>department.sql</code>和<code>employee.sql</code>放入，并在<code>application.yml</code>中写入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:sql/department.sql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:sql/employee.sql</span></span><br></pre></td></tr></table></figure>
<p>此时刷新下IDEA，启动后即可新建两个数据表。</p>
<h2 id="创建JavaBean"><a href="#创建JavaBean" class="headerlink" title="创建JavaBean"></a>创建JavaBean</h2><p>在项目文件夹下新建<code>bean</code>文件夹，新建<code>Department.java</code>类和<code>Employee.java</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String departmentName;</span><br></pre></td></tr></table></figure>
<p>在<code>Employee.java</code>类中加入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="keyword">private</span> Integer gender;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> Integer dId;</span><br></pre></td></tr></table></figure>
<p>二者都使用<code>Alt</code>+<code>Insert</code>插入<code>setter</code>和<code>getter</code>方法。</p>
<h2 id="注解版Mybatis：执行MySQL的增删改查"><a href="#注解版Mybatis：执行MySQL的增删改查" class="headerlink" title="注解版Mybatis：执行MySQL的增删改查"></a>注解版Mybatis：执行MySQL的增删改查</h2><ul>
<li><p><strong>创建@Mapper注解的mapper接口：直接操作数据库</strong><br>在项目文件夹下新建<code>mapper</code>文件夹，新建<code>DepartmentMapper.java</code>类。<br>在<code>DepartmentMapper.java</code>类中加入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//获取自动id：使用自动生成组件+告诉Mybatis："id"属性是用来封装组件的</span></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>写一个controller测试</strong><br>在<code>/controller</code>文件夹下写一个<code>DeptController.java</code>，测试能否实现department的查和增：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"> <span class="comment">//以请求参数的方式返回id，随后用id执行需要的查询操作</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//将所有请求参数封装成Department对象，随后用该对象执行需要的插入操作</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dept"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">insertDepartment</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:8082/dept/1" target="_blank" rel="noopener">http://localhost:8082/dept/1</a> 。此时，查询未果，返回为空白页面：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-13.png" class>   
<p>访问 <a href="http://localhost:8082/dept?departmentName=AA" target="_blank" rel="noopener">http://localhost:8082/dept?departmentName=AA</a> 。此时插入了一个department：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-14.png" class>  
<p>查看数据库。插入成功：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-15.png" class> 
<p>访问 <a href="http://localhost:8082/dept/2" target="_blank" rel="noopener">http://localhost:8082/dept/2</a> 。此时查询到了这个department：   </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-16.png" class> 
</li>
<li><p><strong>两种开启驼峰命名法的配置</strong><br>当JavaBean中的名字（departmentName）和数据库中的名字（department_name）不一样时，便无法完成操作数据库的命令。此时需要修改配置，开启驼峰命名法。  </p>
<ul>
<li>配置文件直接配置<br>在<code>application.yml</code>中写入：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">	  <span class="attr">configuration:</span></span><br><span class="line">    	<span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>利用源码中的ConfigurationCustomizer进行自定义配置<br>不用配置文件的情况下开启驼峰命名法，在<code>/config</code>文件夹下写一个配置类<code>MyBatisConfig.java</code>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用@MapperScan批量扫描所有的Mapper接口</strong><br>若不想在每个mapper类上都标注<code>@Mapper</code>注解，只需要在主程序中用<code>@MapperScan</code>注解，便可以指定某个包下的所有接口都添加<code>@Mapper</code>注解，实现批量扫描所有的Mapper接口：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.example.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot08DataMybatisApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot08DataMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="配置文件版Mybatis：执行MySQL的增删改查"><a href="#配置文件版Mybatis：执行MySQL的增删改查" class="headerlink" title="配置文件版Mybatis：执行MySQL的增删改查"></a>配置文件版Mybatis：执行MySQL的增删改查</h2><ul>
<li><strong>创建无@mapper注解的mapper接口：简化mapper</strong><br>在<code>mapper</code>文件夹，新建<code>EmployeeMapper.java</code>类。<br>在<code>EmployeeMapper.java</code>类中加入：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>mybatis全局配置文件：自定义mybatis的配置</strong><br>在<code>/resources</code>文件夹下，新建<code>/mybatis</code>文件夹，文件夹下新建全局配置文件<code>mybatis_config.xml</code>，写入的内容来源于 <a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">mybatis官方文档</a> 中的<code>Building SqlSessionFactory from XML</code>：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--此处替换成自己所需的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
其中，驼峰命名法的<code>name</code>参见官网 <a href="https://mybatis.org/mybatis-3/configuration.html" target="_blank" rel="noopener">mybatis官方文档</a>。</li>
<li><strong>sql映射文件：在配置文件操作数据库</strong><br>在<code>/resources/mybatis</code>文件夹下，新建<code>/mapper</code>文件夹，文件夹下新建sql映射文件<code>EmployeeMapper.xml</code>，写入的内容来源于 <a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">mybatis官方文档</a> 中的<code>Exploring Mapped SQL Statements</code>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.example.springboot.mapper.EmployeeMapper"</span>&gt;</span><br><span class="line">    &lt;!--    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getEmpById"</span> resultType=<span class="string">"com.example.springboot.bean.Employee"</span>&gt;</span><br><span class="line">        SELECT * FROM employee WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"insertEmp"</span>&gt;</span><br><span class="line">        <span class="function">INSERT INTO <span class="title">employee</span><span class="params">(lastName,email,gender,d_id)</span> <span class="title">VALUES</span> <span class="params">(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>springboot配置文件：指定mybatis所有配置文件位置</strong><br>在<code>application.yml</code>中指定全局配置文件和sql映射文件的位置，由于此处指定了mybatis全局配置的位置，不能再指定mybatis的其他配置，故将之前的驼峰命名法的配置挪到<code>mybatis_config.xml</code>中。<code>application.yml</code>中写入：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="string">config‐location:</span> <span class="string">classpath:mybatis/mybatis_config.xml</span>  <span class="comment"># 指定全局配置文件的位置</span></span><br><span class="line">    <span class="string">mapper‐locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>       <span class="comment"># 指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure></li>
<li><strong>写一个controller测试</strong><br>在<code>/controller/DeptController.java</code>中，测试能否实现employee的查：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EmployeeMapper employeeMapper;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employeeMapper.getEmpById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
新增Employee表数据：  <img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-17.png" class>  
访问 <a href="http://localhost:8082/emp/1" target="_blank" rel="noopener">http://localhost:8082/emp/1</a> 。此时，查询到了这个employee：  <img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-18.png" class>   

</li>
</ul>
<h1 id="整合Spring-Data-JPA"><a href="#整合Spring-Data-JPA" class="headerlink" title="整合Spring Data JPA"></a>整合Spring Data JPA</h1><h2 id="配置Spring-Data-JPA"><a href="#配置Spring-Data-JPA" class="headerlink" title="配置Spring Data JPA"></a>配置Spring Data JPA</h2><p>基于Spring Initializr创建项目，加入Web、JDBC、MySQL、Spring Data JPA等依赖。  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-19.png" class>   
<p>新建一个数据库，名为mybatis：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-20.png" class>  
<p>在<code>application.yml</code>中写入：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.100/jpa?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>
<h2 id="创建JavaBean，配置Bean和数据表的映射"><a href="#创建JavaBean，配置Bean和数据表的映射" class="headerlink" title="创建JavaBean，配置Bean和数据表的映射"></a>创建JavaBean，配置Bean和数据表的映射</h2><p>在项目文件夹下新建<code>/entity</code>文件夹，新建一个实体类<code>User.java</code>和数据表进行映射，并且配置好映射关系：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>
<p>并用<code>Alt</code>+<code>Insert</code>插入<code>setter</code>和<code>getter</code>方法。</p>
<h2 id="编写一个Dao接口"><a href="#编写一个Dao接口" class="headerlink" title="编写一个Dao接口"></a>编写一个Dao接口</h2><p>在项目文件夹下新建<code>/repository</code>文件夹，<font color="#FF0000">声明（无需实现）</font>一个<code>JpaRepository</code>的接口用于操作Bean对应的数据表（Repository）：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基本的JPA配置"><a href="#基本的JPA配置" class="headerlink" title="基本的JPA配置"></a>基本的JPA配置</h2><p>在<code>application.yml</code>中写入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jpa:</span></span><br><span class="line">  <span class="attr">hibernate:</span></span><br><span class="line">    <span class="comment"># 更新或者创建数据表结构</span></span><br><span class="line">    <span class="string">ddl‐auto:</span> <span class="string">update</span></span><br><span class="line">  <span class="comment"># 控制台显示SQL</span></span><br><span class="line">  <span class="string">show‐sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="写一个controller测试"><a href="#写一个controller测试" class="headerlink" title="写一个controller测试"></a>写一个controller测试</h2><p>在<code>/controller/UserController.java</code>中，测试能否实现User的增和查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        User user = userRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:8083/user/1" target="_blank" rel="noopener">http://localhost:8083/user/1</a> 。此时，查询未果，返回为空白页面：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-22.png" class>  
<p>IDEA的回显也能看到此次查询情况：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-21.png" class>  
<p>访问 <a href="http://localhost:8083/user?lastName=Tom&amp;email=hhh" target="_blank" rel="noopener">http://localhost:8083/user?lastName=Tom&amp;email=hhh</a> 。此时插入了一个user：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-23.png" class>  
<p>查看数据库。插入成功：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-24.png" class>   
<p>IDEA的回显也能看到此次插入情况：  </p>
<img src="/2020/02/28/%E3%80%90SpringBoot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/pasted-25.png" class>   

<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p><a href="https://www.bilibili.com/video/av38657363?p=52" target="_blank" rel="noopener">B站视频</a><br><a href="https://blog.csdn.net/qq_42806915/article/details/82930958" target="_blank" rel="noopener">JDBC、JdbcTemplate、Hibernate、Mybatis、JPA、SpringDataJPA</a><br><a href="https://www.cnblogs.com/inspurhaitian/p/4647485.html" target="_blank" rel="noopener">HIBERNATE与MYBATIS的对比</a><br><a href="https://www.cnblogs.com/aeolian/p/10735122.html" target="_blank" rel="noopener">jdbc、jpa、spring data jpa、hibernate、mybatis之间的关系及区别
</a><br><a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">mybatis官方文档</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Dao层</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Dao层</tag>
        <tag>JDBC</tag>
        <tag>ORM</tag>
        <tag>JPA</tag>
        <tag>Hibernate</tag>
        <tag>Mybatis</tag>
        <tag>Spring Boot JPA</tag>
        <tag>Druid</tag>
        <tag>Centos</tag>
        <tag>Docker</tag>
        <tag>MySQL</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】Web开发</title>
    <url>/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Web开发简介"><a href="#Web开发简介" class="headerlink" title="Web开发简介"></a>Web开发简介</h1><h2 id="使用Spring-Boot"><a href="#使用Spring-Boot" class="headerlink" title="使用Spring Boot"></a>使用Spring Boot</h2><ul>
<li>创建SpringBoot应用，选中我们需要的模块；</li>
<li>SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来；</li>
<li>自己编写业务代码。<a id="more"></a>  

</li>
</ul>
<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ul>
<li><code>xxxxAutoConfiguration</code>：帮我们给容器中自动配置组件；</li>
<li><code>xxxxProperties</code>：配置类来封装配置文件的内容。</li>
</ul>
<h1 id="Spring-Boot对静态资源的映射规则"><a href="#Spring-Boot对静态资源的映射规则" class="headerlink" title="Spring Boot对静态资源的映射规则"></a>Spring Boot对静态资源的映射规则</h1><h2 id="WebMvcAutoConfiguration-class"><a href="#WebMvcAutoConfiguration-class" class="headerlink" title="WebMvcAutoConfiguration.class"></a>WebMvcAutoConfiguration.class</h2><p>新建一个Spring项目，加入Web开发依赖。<br>双击Shift，搜索<code>WebMvcAutoConfiguration.class</code>文件。</p>
<h2 id="静态资源文件夹映射"><a href="#静态资源文件夹映射" class="headerlink" title="静态资源文件夹映射"></a>静态资源文件夹映射</h2><p>对于静态资源的映射目录是/META-INF/resource， /static, /public, /resources。具体地可以查看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="comment">//静态资源文件夹映射</span></span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点关注上述<code>&quot;/webjars/**&quot;</code>以及<code>静态资源文件夹映射</code>中的<code>this.resourceProperties.getStaticLocations()</code>。  </p>
<ul>
<li><font color="#FF0000">webjars：以jar包的方式引入静态资源</font><br>所有<code>&quot;/webjars/**&quot;</code>，都去<code>classpath:/META-INF/resources/webjars/</code>找资源。<br>举例：到 <a href="http://www.webjars.org/" target="_blank" rel="noopener">webjars官网</a> ,将jquery依赖加载到<code>pom.xml</code>文件中：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-17.png" class>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
随后，项目路径下的<code>External Libraries</code>便增加了jquery的库。<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-18.png" class>  
此时，访问 localhost:8080/webjars/jquery/3.4.1/jquery.js ，即可访问<code>jquery.js</code>文件。  </li>
<li><font color="#FF0000">静态资源文件夹：”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</font><br>其中，<code>getStaticLocations()</code>的返回值是字符串数组常量：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br></pre></td></tr></table></figure>
即对应下列路径：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META‐INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/static/"</span>,</span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br><span class="line"><span class="string">"/"</span>：当前项目的根路径</span><br></pre></td></tr></table></figure>
在<code>resources</code>文件夹下除了原有的<code>static</code>文件夹，再次创建<code>resources</code>、<code>public</code>文件夹，并将资源<code>asserts</code>文件夹放入<code>static</code>下：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-19.png" class> 
此时，需刷新waven，重启项目，再访问 <a href="http://localhost:8080/asserts/js/Chart.min.js" target="_blank" rel="noopener">http://localhost:8080/asserts/js/Chart.min.js</a> ，即可访问<code>Chart.min.js</code>文件。</li>
</ul>
<h2 id="欢迎页映射"><a href="#欢迎页映射" class="headerlink" title="欢迎页映射"></a>欢迎页映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(<span class="keyword">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] locations = WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">(Resource resource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resource.exists() &amp;&amp; resource.getURL() != <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><font color="#FF0000">静态资源文件夹：”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</font><br>任意/static, /public, /resources文件夹均可。<br>如在<code>public</code>文件夹下，新建一个<code>index.html</code>文件，写入<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-20.png" class>   
此时，访问 localhost:8080 ，即可访问欢迎页。  </li>
</ul>
<h2 id="图标映射"><a href="#图标映射" class="headerlink" title="图标映射"></a>图标映射</h2><p>由于Spring Boot 2.2.X以上的版本不再支持直接加载图标。需要采用下述方式加载。<br>首先在任意/static, /public, /resources文件夹均可。如在<code>resources</code>文件夹下，插入一个<code>favicon.ico</code>文件。<br>随后在需要图标的页面，加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用Thymeleaf解决th报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用Thymeleaf时的引入方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/favicon.ico&#125;"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"bookmark"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/favicon.ico&#125;"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此法需要在每个页面都进行引入，较为繁琐。</p>
<ul>
<li><strong>自定义静态资源文件夹</strong><br>在<code>application.properties</code>文件中加入：<br><code>spring.resources.static-locations=classpath:/hello,classpath:/test</code>，即可使原本的静态资源文件夹失效，变成自定义的<code>/hello</code>、<code>/test</code>文件夹。  </li>
</ul>
<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>作用：将模板和数据通过模板引擎结合，作为最终的输出。<br>常见引擎：JSP、Velocity、Freemarker、Thymeleaf。  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-21.png" class> 

<h2 id="引入thymeleaf"><a href="#引入thymeleaf" class="headerlink" title="引入thymeleaf"></a>引入thymeleaf</h2><p>从<a href="https://docs.spring.io/spring-boot/docs/2.2.4.RELEASE/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">官网说明文档</a>找到starter-thymeleaf的依赖名，将starter-thymeleaf依赖手动加载到<code>pom.xml</code>文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入starter-thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h2><ul>
<li>【前端页面存放位置】<br>在扩展包<code>External libraries</code>中找到关于spring-boot-autoconfigure的maven配置。    在该配置下的<code>\org\springframework\boot\autoconfigure</code>里找到<code>\thymeleaf</code>文件夹，其中便有Thymeleaf的自动配置类：<code>ThymeleafAutoConfiguration.class</code>。<br>找到默认规则：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure>
只要我们把HTML页面放在<code>classpath:/templates/</code>下，thymeleaf就能自动渲染。<br>如写一个html界面到<code>/templates</code>下： <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-22.png" class>   
在<code>HelloController</code>类中，写入一个请求：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//classpath:/templates/success.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注意此时<code>success()</code>返回的是一个页面<code>success.html</code>，不是消息/字符串，故不能用<code>@ResponseBody</code>作注解，也因此<code>HelloController</code>类也不能用<code>@RestController</code>作为注解。<br>返回的<code>success.html</code>页面：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-24.png" class>   </li>
<li>【前端获取后端容器中的变量】<br>后台：将数据以json格式传到前台，需以键值对的格式，如用map进行传递。最后返回页面名称。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">"hello"</span>, <span class="string">"你好啊"</span>);</span><br><span class="line">    <span class="comment">//classpath:/templates/success.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
前台：引入命名空间，使得浏览器正确解析th标签；利用&lt;key: value&gt;取得“hello”对应的“你好啊”。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功啦！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!‐‐th:text</span> 将<span class="attr">div</span>里面的文本内容设置为 ‐‐&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
运行结果：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-25.png" class>  

</li>
</ul>
<h2 id="thymeleaf语法"><a href="#thymeleaf语法" class="headerlink" title="thymeleaf语法"></a>thymeleaf语法</h2><ul>
<li><strong>thymeleaf <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax" target="_blank" rel="noopener">官方文档</a></strong>  </li>
<li><strong>常见<code>th</code>的使用示例</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功啦！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!‐‐th:text</span> 将<span class="attr">div</span>里面的文本内容设置为 ‐‐&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div01"</span> <span class="attr">class</span>=<span class="string">"myDiv"</span> <span class="attr">th:id</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user&#125;"</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!‐‐[[...]]等价于th:text；[(...)]等价于th:utext</span>  ‐‐&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
返回结果：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-27.png" class> 

</li>
</ul>
<h1 id="RestfulCRUD项目"><a href="#RestfulCRUD项目" class="headerlink" title="RestfulCRUD项目"></a>RestfulCRUD项目</h1><h2 id="默认访问首页"><a href="#默认访问首页" class="headerlink" title="默认访问首页"></a>默认访问首页</h2><ul>
<li><p>法一：编写HelloController响应请求<br>在<code>HelloController</code>中写入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(&#123;<span class="string">"/"</span>, <span class="string">"/index.html"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>随后刷新maven，重启项目，即可在 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 或者 <a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a> 中访问<code>index.html</code>。  </p>
</li>
<li><p>法二：编写一个配置类实现MVC视图映射<br>这个配置类（<code>@Configuration</code>），是<code>WebMvcConfigurationSupport</code>类型；不能标注<code>@EnableWebMvc</code>。这样既保留了所有的自动配置，也能用我们扩展的配置。<br>首先，新建一个<code>@Configuration</code>配置类，实现了接口<code>WebMvcConfigurer</code>，并用<code>ctrl+o</code>选择可重写的方法列表，选择其中的<code>addViewControllers</code>  </p>
  
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurer可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /example 请求来到 success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/example"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>此时访问 <a href="http://localhost:8080/example" target="_blank" rel="noopener">http://localhost:8080/example</a> 页面：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-29.png" class>  
<p>这样就成功替代了spingmvc配置文件（new中的<code>XML Configuration File</code>）的作用，同样实现MVC视图映射：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view‐controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view</span>‐<span class="attr">name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若需要多个MVC视图映射，最后都返回登陆页面，可以写入下列代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurationSupport可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /example 请求来到 success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/example"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebMvcConfigurer configurer = <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 或者 <a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a> 页面，都可以成功访问<code>/templates</code>下的<code>login.html</code>： </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-30.png" class> 
</li>
<li><p>引入bootstrap<br>从<a href="https://www.webjars.org/" target="_blank" rel="noopener">WebJars官网</a>找到bootstrap-webjars的依赖名，将bootstrap-webjars依赖手动加载到<code>pom.xml</code>文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入bootstrap-webjars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.1-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>【可选】随后可以在登录页面<code>login.html</code>中修改配置到本地依赖，如下出现<code>th</code>的地方则为新增的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">DOCTYPE html&gt;</span><br><span class="line"><span class="comment">&lt;!-- 新增之处为xmlns--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Bootstrap core CSS，新增之处为/webjars的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.4.1-1/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Custom styles for this template，新增之处为同一路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 新增之处为同一路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul>
<li><p><strong>编写国际化配置文件</strong>  </p>
<ul>
<li><p>建立国际化配置文件<br>在<code>\resources</code>下新建<code>\i18n</code>文件夹，在该文件夹下新建<code>login.properties</code>文件：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-31.png" class>   
<p>同时建立<code>login_zh_CN.properties</code>，此时IDEA识别到我们建立了这个国际化配置文件，自动切换到国际化视图：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-32.png" class>   
<p>此时在<code>Resource Bundle &#39;login&#39;</code>文件夹下，可选择<code>en_US</code>生成对应的配置文件。  </p>
</li>
<li><p>建立登录提示<br>选择<code>Resource Bundle</code>视图，选择加号建立登录提示：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-33.png" class>  
<p>将<code>login.html</code>中的登录提示对应填入：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-34.png" class>   
<p>依次完成其他对应配置：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-35.png" class>   
</li>
</ul>
</li>
<li><p><strong>SpringBoot自动配置好了管理国际化资源文件的组件</strong><br>使用<code>ctrl+shift+n</code>搜索<code>MessageSourceAutoConfiguration</code>类，可以看到：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = <span class="keyword">new</span> Resource[<span class="number">0</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSourceAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">        prefix = <span class="string">"spring.messages"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">            messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">        Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">        <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>因此可以在配置文件<code>application.properties</code>中指定包名：<br><code>spring.messages.basename=i18n.login</code></p>
</li>
<li><p><strong>在页面中更新国际化的配置</strong><br>在<code>login.html</code>中，更新各种配置，如<code>th:text=&quot;#{login.username}&quot;</code>、<code>th:placeholder=&quot;#{login.username}&quot;</code>、<code>[[#{login.remember}]]</code>：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>  <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span> &gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">       <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对当前项目修改为UTF-8，转为ascii编码，在<code>Settings</code>找到<code>File Encodings</code>：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-37.png" class>   
<p>对IDEA全局同样可以做出修改，在<code>Other Settings</code>找到<code>Settings for New Projects</code>，修改方式同上。  </p>
</li>
<li><p><strong>访问结果</strong><br>浏览器设为中英文的访问结果：</p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-40.png" class>   
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-39.png" class>   
</li>
<li><p><strong>点击链接切换国际化</strong>  </p>
<ul>
<li>国际化原理：<br>国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）。</li>
<li>源码中定义的区域信息解析器：<br>找到<code>WebMvcAutoConfiguration</code>类，<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">      <span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">          prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">          name = &#123;<span class="string">"locale"</span>&#125;</span><br><span class="line">      )</span><br><span class="line">      <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">              localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">              <span class="keyword">return</span> localeResolver;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//默认的就是根据请求头带来的区域信息获取Locale进行国际化</span></span><br></pre></td></tr></table></figure></li>
<li>自定义区域信息解析器：<br>自己编写一个<code>MyLocaleResolver</code>类，是<code>LocaleResolver</code>的接口。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (! StringUtils.isEmpty(l)) &#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
并将其作为方法的返回值放入容器中：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
此时，点击中英文，可自动切换。</li>
</ul>
</li>
</ul>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul>
<li><p><strong>前端界面</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/user/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>  <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定要请求的页面<br>其中的<code>th:action=&quot;@{/user/login}&quot; method=&quot;post&quot;</code>制定了发出请求的页面<code>/user/login</code>，<code>name=&quot;username&quot;</code>和<code>name=&quot;password&quot;</code>指定了请求的参数为用户名和密码。</li>
<li>提示错误消息<br><code>&lt;p style=&quot;color: red&quot; th:text=&quot;${msg}&quot; th:if=&quot;${not #strings.isEmpty(msg)}&quot;&gt;&lt;/p&gt;</code></li>
</ul>
</li>
<li><p><strong>写一个controller处理登录请求</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@DeleteMapping</span></span><br><span class="line">    <span class="comment">//@PutMapping</span></span><br><span class="line">    <span class="comment">//@GetMapping</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/user/login"</span>)</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/user/login", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">                        Map&lt;String, Object&gt; map) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; password.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"dashboard"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"用户名密码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>处理的请求地址：<code>/user/login</code>。提交的请求参数用<code>@RequestParam(&quot;xxx&quot;)</code>标注。成功则访问<code>dashboard.html</code>页面，失败则返回错误消息+返回<code>login.html</code>登录页面。<br>此处还可以用REST API方式的注解<code>@PostMapping</code>替代了<code>@RequestMapping</code>来处理请求。</p>
</li>
<li><p><strong>访问结果</strong><br>成功跳转<code>dashboard.html</code>页面:  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-43.png" class>   
<p>失败返回<code>login.html</code>登录页面+提示错误消息：</p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-44.png" class>   </li>
<li><p><strong>重定向防止重复提交</strong>  </p>
<ul>
<li>添加视图映射<br>由于重定向需要通过模板解析，因此先添加一个视图映射：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br></pre></td></tr></table></figure>
使得当前项目下访问<code>main.html</code>映射为<code>dashboard</code>视图。  </li>
<li>实现重定向<br>将<code>controller</code>中的登录成功后重定向到当前项目下的<code>main.html</code>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; password.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">            <span class="comment">//为了防止表单重复提交，可以重定向到主页</span></span><br><span class="line">            <span class="comment">//return "dashboard";</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
<li>成功访问<code>main.html</code>页面  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-45.png" class>   
</li>
</ul>
</li>
<li><p><strong>拦截器机制进行登陆检查</strong>   </p>
<ul>
<li>创建拦截器<br>在<code>component</code>下创建一个拦截器：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//未登录，返回登录界面，需要传msg，故用转发不用重定向</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>, <span class="string">"没有权限，请先登录"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注册拦截器<br>在<code>MyMvcConfig</code>类下，注册拦截器组件，与之前的组件类似利用回调函数注册到容器：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebMvcConfigurer configurer = <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册拦截器</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//"/**"：拦截任意多重路径下的任意请求。排除两个登录页面请求，一个发送请求，以及静态资源</span></span><br><span class="line">            registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                    .excludePathPatterns(<span class="string">"/index.html"</span>, <span class="string">"/"</span>, <span class="string">"/user/login"</span>, <span class="string">"/webjars/**"</span>, <span class="string">"/asserts/**"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> configurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>实现直接访问除两个登录页面请求，一个发送请求，以及静态资源的任意请求，都将会把没有登录名的请求拦截下来<br>如换个浏览器访问<code>main.html</code>请求：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-46.png" class>

</li>
</ul>
</li>
</ul>
<h2 id="员工列表"><a href="#员工列表" class="headerlink" title="员工列表"></a>员工列表</h2><ul>
<li><strong>RestfulCRUD</strong><br>RestfulCRUD：CRUD满足Rest风格；<br>URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作。  </li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
<ul>
<li><strong>实验的请求架构</strong>  </li>
</ul>
<table>
<thead>
<tr>
<th>实验功能请求</th>
<th>URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工（来到修改页面）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<ul>
<li><strong>员工列表获取</strong><br>将<code>dashboard.html</code>、<code>list.html</code>的CSS样式分别用thymeleaf语法进行路径引入。<br>如:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dashboard Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.4.1-1/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/dashboard.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/dashboard.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
查询所有员工是发送<code>/emps</code>请求，因此先建立<code>EmployeeController</code>控制器来处理该请求：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Autowired</span></span><br><span class="line">      EmployeeDao employeeDao;</span><br><span class="line">      <span class="comment">//查询所有员工返回列表页面</span></span><br><span class="line">      <span class="meta">@GetMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">          Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//model：数据放在请求域中</span></span><br><span class="line">          model.addAttribute(<span class="string">"emps"</span>, employees);</span><br><span class="line">          <span class="comment">//thymeleaf就会自动拼串"classpath:templates/xxxxxx.html"</span></span><br><span class="line">          <span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
此时点击<code>Customers</code>即可发送<code>/emps</code>请求，跳转到<code>list.html</code>页面：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-0.png" class>

</li>
</ul>
<h2 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h2><ul>
<li><p><strong>步骤</strong></p>
<ul>
<li><p>抽取公共片段<br>定义片段名，便于后续抽取：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引入公共片段  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中插入的内容可以为两种形式：<br><code>~{templatename::selector}</code>：模板名::选择器(#id)<br><code>~{templatename::fragmentname}</code>:模板名::片段名  </p>
</li>
<li><p>默认效果：<br>insert的公共片段在<code>div</code>标签中；<br>如果使用<code>th:insert</code>等属性进行引入，可以不用写<code>~{}</code>，即<code>&lt;div th:insert=&quot;footer :: copy&quot;&gt;&lt;/div&gt;</code>；<br>行内写法可以加上，如：<code>[[~{}]]</code>或<code>[(~{})]</code>。</p>
</li>
</ul>
</li>
<li><p><strong>三种引入公共片段的th属性</strong><br><code>th:insert</code>：将公共片段整个插入到声明引入的元素中；<br><code>th:replace</code>：将声明引入的元素替换为公共片段；<br><code>th:include</code>：将被引入的片段的内容包含进这个标签中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!----------- 代码块 ------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!---------- 引入方式 -----------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> footer插入到div里</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> footer替换掉footer</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> footer里的内容包含在div里</span><br><span class="line"><span class="comment">&lt;!------------ 效果1 ------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!------------ 效果2 ------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!------------ 效果3 ------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>效果<br>此时在<code>dashboard.html</code>中引入片段名或者id后，可以将<code>list.html</code>的公共片段进行替换：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--引入抽取的dashboard :: topbar，对应th:fragment="topbar"--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;dashboard :: topbar&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--引入抽取的dashboard :: #sidebar，对应id="sidebar"--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;dashboard :: #sidebar&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
此时点击<code>list.html</code>页面下的视图，员工管理同样会实现此前<code>dashboard.html</code>中修改的查询员工功能：<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-2.png" class>
</li>
</ul>
</li>
<li><p><strong>引入公共片段时传入各自参数</strong><br>为了方便，可以将<code>dashboard.html</code>和<code>list.html</code>的公告片段，即顶栏和侧边栏放入一个新的html文件<code>/commons/bar.html</code>中，各自引入<code>bar.html</code>的公告片段，并传入需要修改的参数：<br><code>/commons/bar.html</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:fragment="topbar"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0"</span> <span class="attr">th:fragment</span>=<span class="string">"topbar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand col-sm-3 col-md-2 mr-0"</span> <span class="attr">href</span>=<span class="string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span>&gt;</span>[[$&#123;session.loginUser&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control form-control-dark w-100"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span> <span class="attr">aria-label</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav px-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item text-nowrap"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:fragment="sidebar"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/main.html&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                        Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emps&#125;"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='emps'?'nav-link active':'nav-link'&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-users"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"9"</span> <span class="attr">cy</span>=<span class="string">"7"</span> <span class="attr">r</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M23 21v-2a4 4 0 0 0-3-3.87"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M16 3.13a4 4 0 0 1 0 7.75"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                        员工管理</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当点击侧边栏的<code>Dashboard</code>时，需要发送<code>main.html</code>请求，访问<code>dashboard.html</code>页面中将对应，并<code>Dashboard</code>高亮，即在<code>dashboard.html</code>页面中将对应标签设为<code>class=&quot;nav-link active&quot;</code>，为了动态更新该标签，故在<code>dashboard.html</code>中：引用<code>/commons/bar.html</code>+传入一个值。<br><code>dashboard.html</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--引入抽取的dashboard :: topbar，对应th:fragment="topbar"--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;commons/bar::topbar&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--引入抽取的dashboard :: #sidebar，对应id="sidebar"--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='main.html')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同理，当点击侧边栏的<code>员工管理</code>时，需要发送<code>emps</code>请求，访问<code>list.html</code>页面中将对应，并<code>员工管理</code>高亮，即在<code>list.html</code>页面中将对应标签设为<code>class=&quot;nav-link active&quot;</code>，为了动态更新该标签，故在<code>list.html</code>中：引用<code>/commons/bar.html</code>+传入一个值。<br><code>list.html</code>文件：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--引入抽取的dashboard :: topbar，对应th:fragment="topbar"--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::topbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--引入抽取的dashboard :: #sidebar，对应id="sidebar"--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="插入已有数据"><a href="#插入已有数据" class="headerlink" title="插入已有数据"></a>插入已有数据</h2><p>在<code>list.html</code>页面下，插入数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">btn-dm</span> <span class="attr">btm-success</span>&gt;</span>员工添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-sm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>birth<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.birth&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>PS：此处的数据来源。当点击侧边栏的<code>员工管理</code>查询所有员工时，发送<code>/emps</code>请求，该请求是在<code>EmployeeController</code>控制器中处理的。当发送该请求时，会利用<code>EmployeeDao</code>类的实例的<code>getAll()</code>方法获取数据。并将数据放在<code>emps</code>的请求域里，便可在<code>list.html</code>中利用<code>th:each=&quot;emp:${emps}&quot;</code>获取值。<br>运行结果如下：</p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-3.png" class> 

</li>
</ul>
<h2 id="增加员工"><a href="#增加员工" class="headerlink" title="增加员工"></a>增加员工</h2><ul>
<li><strong>增加编辑员工页面add.html</strong><br>首先激活<code>list.html</code>页面下的员工添加按钮，为按钮设置跳转链接<code>/emp</code>请求：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button btn-dm btm-success"</span> <span class="attr">href</span>=<span class="string">"emp"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp&#125;"</span>&gt;</span>员工添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
在<code>EmployeeController</code>类中加入处理<code>/emp</code>的Get请求的方法，使其跳转到<code>emp</code>文件夹下的一个<code>add.html</code>网页：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转到员工添加页面</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Department&gt; departments = departmenrDao.getDepartments();</span><br><span class="line">    model.addAttribute(<span class="string">"depts"</span>, departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>编辑add.html</strong><br>在<code>emp</code>文件夹下新建<code>add.html</code>，将<code>list.html</code>公共页面的顶栏和侧边栏引入。<br>随后到 <a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/" target="_blank" rel="noopener">Bootstrap官网</a> 的<code>/components/Forms</code>中引入表单，做出相应修改。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;depts&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>处理提交请求</strong><br>在<code>EmployeeController</code>类中加入处理<code>/emp</code>的Post请求的方法，使其提交后重定向回到<code>emps</code>视图，也就是<code>/emp/list.html</code>页面：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工添加</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>自定义日期格式</strong><br>SpringBoot默认使用的日期格式是：<code>yyyy/MM/dd</code>，即以“/” 进行分隔。在配置文件<code>application.properties</code>中添加：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mvc.date-format=yyyy-MM-dd</span><br></pre></td></tr></table></figure>
即可统一输入的日期格式为<code>yyyy-MM-dd</code>。  </li>
</ul>
<h2 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h2><ul>
<li><strong>修改编辑员工页面add.html</strong><br>首先激活<code>list.html</code>页面下的员工修改按钮，为按钮设置跳转链接<code>/emp/id</code>请求：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
在<code>EmployeeController</code>类中加入处理<code>/emp/id</code>的Get请求的方法，使其跳转到<code>emp</code>文件夹下的<code>add.html</code>网页：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转到员工添加页面</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Department&gt; departments = departmenrDao.getDepartments();</span><br><span class="line">    model.addAttribute(<span class="string">"depts"</span>, departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>提交修改请求</strong><br><code>add.html</code>页面创建一个post表单，并创建一个<code>input</code>项，所提交的<code>name=&quot;_method&quot;</code>的值<code>put</code>就是我们指定的请求方式：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">  2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">  3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>处理修改请求</strong><br>在<code>EmployeeController</code>类中加入处理<code>/emp</code>的put请求的方法，使其提交后重定向回到<code>emps</code>视图，也就是<code>/emp/list.html</code>页面：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//员工修改</span><br><span class="line">@PutMapping("/emp")</span><br><span class="line">public String updateEmp(Employee employee) &#123;</span><br><span class="line">	employeeDao.save(employee);</span><br><span class="line">	System.out.println(employee);</span><br><span class="line">	return "redirect:/emps";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h2><ul>
<li><strong>修改删除按钮</strong><br>将<code>list.html</code>的删除按钮包装成一个post表单，并创建一个<code>input</code>项，所提交的<code>name=&quot;_method&quot;</code>的值<code>delete</code>就是我们指定的请求方式：。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
如果后续运行的时候报405请求错误，就得在配置文件<code>application.properties</code>中添加：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mvc.hiddenmethod.filter.enabled=true</span><br></pre></td></tr></table></figure></li>
<li><strong>处理删除请求</strong><br>在<code>EmployeeController</code>类中加入处理<code>/emp/{id}</code>的delete请求的方法，使其提交后重定向回到<code>emps</code>视图，也就是<code>/emp/list.html</code>页面：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工删除</span></span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    System.out.println(employeeDao);</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    System.out.println(employeeDao);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>删除按钮精简化</strong><br>首先将form提取出来，随便放<code>main</code>标签外：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"deleteEmpForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
精简删除按钮：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
当点击<code>class</code>名为<code>deleteBtn</code>的删除按钮之后，会调用js代码，js代码会将<code>del_uri</code>的值给<code>deleteEmpForm</code>的<code>action</code>属性，然后进行提交：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//删除当前员工的</span></span></span><br><span class="line"><span class="javascript">		$(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h1><h2 id="SpringBoot默认的错误处理机制"><a href="#SpringBoot默认的错误处理机制" class="headerlink" title="SpringBoot默认的错误处理机制"></a>SpringBoot默认的错误处理机制</h2><p>当我们将拦截器注释掉，随便访问一个地址，浏览器将返回一个错误页面：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-4.png" class>  
<p>浏览器发送请求的请求头里有<code>text/html</code>：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-6.png" class>   
<p>客户端发送请求将返回一个json数据：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-16.png" class>  
<p>在<code>External Libraries</code>下找到autoconfigure，打开错误处理的自动配置文件：<code>/web/servlet/error/ErrorMvcAutoConfiguration</code>。其给容器中添加了以下组件：  </p>
<ul>
<li><strong>DefaultErrorAttributes</strong>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">this</span>.addStatus(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">this</span>.addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.addPath(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>BasicErrorController（处理默认/error请求）</strong>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//帮我们在页面共享信息；</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = &#123;<span class="string">"text/html"</span>&#125;) <span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> modelAndView != <span class="keyword">null</span> ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>  <span class="comment">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(body, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>ErrorPageCustomizer</strong>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>; <span class="comment">//系统出现错误以后来到/error请求进行处理；web.xml注册的错误页面规则）</span></span><br></pre></td></tr></table></figure></li>
<li><strong>DefaultErrorViewResolver</strong>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">  ModelAndView modelAndView = <span class="keyword">this</span>.resolve(String.valueOf(status.value()), model);</span><br><span class="line">  <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">  modelAndView = <span class="keyword">this</span>.resolve((String)SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> modelAndView;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//默认SpringBoot可以去找到一个页面？ error/404</span></span><br><span class="line">  String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">  <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析。模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">  TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">  <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面 error/404.html</span></span><br><span class="line">  <span class="keyword">return</span> provider != <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(errorViewName, model) : <span class="keyword">this</span>.resolveResource(errorViewName, model);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="SpringBoot默认的错误处理步骤"><a href="#SpringBoot默认的错误处理步骤" class="headerlink" title="SpringBoot默认的错误处理步骤"></a>SpringBoot默认的错误处理步骤</h2><p>一但系统出现4xx或者5xx之类的错误；<code>ErrorPageCustomizer</code>就会生效（定制错误的响应规则）；就会来到<code>/error</code>请求；就会被<code>BasicErrorController</code>处理；<br>1）响应页面；去哪个页面是由<code>DefaultErrorViewResolver</code>解析得到的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">	<span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">		ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> modelAndView;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何定制错误页面响应"><a href="#如何定制错误页面响应" class="headerlink" title="如何定制错误页面响应"></a>如何定制错误页面响应</h2><ul>
<li><strong><font color="#FF0000">有模板引擎的情况下</font></strong><br>利用<code>error/状态码</code>:【将错误页面命名为<code>错误状态码.html</code>，放在模板引擎文件夹33<code>/templates</code>里面的<code>/error</code>文件夹下】，发生此状态码的错误就会来到对应的页面。<br>如访问错误页面报404错误，则会跳转到<code>/templates/error/404.html</code>：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-7.png" class>  
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-8.png" class>  
我们可以使用<code>4xx.html</code>和<code>5xx.html</code>作为错误页面的文件名来匹配这种类型的所有错误，但精确优先（优先寻找精确的状态码.html）。<br>如提交错误格式的日期报400错误，则会跳转到<code>/templates/error/4xx.html</code>：  <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-9.png" class>  
页面能获取的信息：<br>timestamp：时间戳<br>status：状态码<br>error：错误提示<br>exception：异常对象<br>message：异常消息<br>errors：JSR303数据校验的错误都在这里 </li>
<li><strong><font color="#FF0000">没有模板引擎 / 模板引擎找不到这个错误页面</font></strong><br>此时会从静态资源文件夹下找，如将<code>/templates/error</code>的<code>/error</code>文件夹移动到<code>/static</code>中，发生某个状态码的错误依然能来到对应的页面。  </li>
<li><strong><font color="#FF0000">以上路径都没有错误页面</font></strong><br>默认来到SpringBoot默认的错误提示页面。  </li>
</ul>
<h2 id="如何定制错误json响应"><a href="#如何定制错误json响应" class="headerlink" title="如何定制错误json响应"></a>如何定制错误json响应</h2><ul>
<li><p><strong><font color="#FF0000">定制错误提示</font></strong><br>在项目路径新建<code>/exception</code>文件夹，写一个错误提示类<code>UserNotExistException</code>，报500错误。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserNotExistException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"自制错误发现用户不存在哈哈哈"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>HelloController</code>中写一个请求处理，当提交一个<code>user</code>参数为<code>aaa</code>的get请求时，抛出<code>UserNotExistException</code>错误，否则返回字符串’hi’： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"user"</span>)</span> String user) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user.equals(<span class="string">"aaa"</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> UserNotExistException();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，浏览器访问 <a href="http://localhost:8081/crud/hello?user=111" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=111</a> ，将返回字符串’hi’：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-13.png" class>  
<p>此时，浏览器访问 <a href="http://localhost:8081/crud/hello?user=aaa" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=aaa</a> ，将返回错误页面<code>/templates/error/5xx.html</code>：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-14.png" class>  
<p>此时，客户端访问 <a href="http://localhost:8081/crud/hello?user=aaa" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=aaa</a> ，将返回json数据：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-182.png" class>  </li>
<li><p><strong><font color="#FF0000">定制无自适应错误处理</font></strong><br>在<code>/controller</code>下写一个错误消息处理类<code>MyExceptionHandler</code>，自定义异常处理且返回定制json数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无自适应</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"user.notexist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"用户出错啦"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，浏览器或者客户端访问 <a href="http://localhost:8081/crud/hello?user=aaa" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=aaa</a> ，都将根据错误消息处理类<code>MyExceptionHandler</code>返回json数据：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-181.png" class>  
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-191.png" class>   
</li>
<li><p><strong><font color="#FF0000">定制自适应错误处理</font></strong><br>当<code>@ExceptionHandler</code>机制检测到<code>UserNotExistException</code>错误时，无自适应的错误消息处理类返回的是一个哈希表，对应着json数据，因此可以通过把哈希表封装在request中，返回结果转发到<code>/error</code>进行自适应响应效果处理，实现浏览器返回错误页面，客户端返回json数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自适应</span></span><br><span class="line"> <span class="meta">@ControllerAdvice</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">     <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">     <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//传入我们自己的错误状态码 4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">          .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">         Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">         map.put(<span class="string">"code"</span>, <span class="string">"user.notexist"</span>);</span><br><span class="line">         map.put(<span class="string">"message"</span>, <span class="string">"自适应错误响应发现你出错了嘿嘿嘿"</span>);</span><br><span class="line">         request.setAttribute(<span class="string">"ext"</span>, map);</span><br><span class="line">         <span class="comment">//转发到/error</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>此时，浏览器访问 <a href="http://localhost:8081/crud/hello?user=aaa" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=aaa</a> ，将根据错误消息处理类<code>MyExceptionHandler</code>返回错误页面<code>/templates/error/5xx.html</code>，且能够获取封装在request中的<code>ext</code>字段：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-183.png" class>  
<p>此时，客户端访问 <a href="http://localhost:8081/crud/hello?user=aaa" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=aaa</a> ，将根据错误消息处理类<code>MyExceptionHandler</code>返回json数据，但此时json数据还不能够获取封装在request中的<code>ext</code>字段：  </p>
<img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-193.png" class>  

</li>
</ul>
<h2 id="将我们的定制数据携带出去"><a href="#将我们的定制数据携带出去" class="headerlink" title="将我们的定制数据携带出去"></a>将我们的定制数据携带出去</h2><ul>
<li><strong>原理</strong><br>出现错误以后，会来到<code>/error</code>请求，会被<code>BasicErrorController</code>处理，响应出去可以获取的数据是由<code>getErrorAttributes</code>得到的（是<code>AbstractErrorController(ErrorController)</code>规定的方法）。</li>
<li><strong>可取的方法</strong>  <ul>
<li>1、完全来编写一个<code>ErrorController</code>的实现类【或者是编写<code>AbstractErrorController</code>的子类】，放在容器中；</li>
<li>2、页面上能用的数据，或者是json返回能用的数据都是通过<code>errorAttributes.getErrorAttributes</code>得到；<br>由容器中<code>DefaultErrorAttributes.getErrorAttributes()</code>默认进行数据处理的。</li>
</ul>
</li>
<li><strong>自定义<code>ErrorAttributes</code></strong>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写父类构造方法，传入true，即可获取异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取原来的响应数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        <span class="comment">//从请求域中拿值</span></span><br><span class="line">        Map&lt;String, Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ext"</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">        <span class="comment">//添加我们定制的响应数据</span></span><br><span class="line">        map.put(<span class="string">"ext"</span>,ext);</span><br><span class="line">        <span class="comment">//返回带有我们定制的数据的map，map即为页面和自身能获取的所有数据</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
此时，客户端访问 <a href="http://localhost:8081/crud/hello?user=aaa" target="_blank" rel="noopener">http://localhost:8081/crud/hello?user=aaa</a> ，也能返回自己封装的json数据： <img src="/2020/02/09/%E3%80%90SpringBoot%E3%80%91Web%E5%BC%80%E5%8F%91/pasted-184.png" class>

</li>
</ul>
<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p><a href="https://www.bilibili.com/video/av38657363?p=27" target="_blank" rel="noopener">B站视频</a><br><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/" target="_blank" rel="noopener">Bootstrap 官网</a><br><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax" target="_blank" rel="noopener">thymeleaf 官方文档</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java Web</tag>
        <tag>Thymeleaf</tag>
        <tag>RestfulCRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】配置文件</title>
    <url>/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul>
<li><p>SpringBoot使用一个全局的<font color="#FF0000">配置文件</font>，配置文件名是固定的。</p>
<ul>
<li><strong>application.properties</strong>   </li>
<li><strong>application.yml</strong>  </li>
</ul>
</li>
<li><p><font color="#FF0000">配置文件</font>的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好。</p>
<a id="more"></a>  
<ul>
<li><strong>application.properties</strong><br>用Spring Initializr新建一个SpringBoot项目，则配置文件<code>application.properties</code>在<code>/src/main/resources</code>目录下。可写入需要的配置：  <img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-0.png" class></li>
<li><strong>application.yml</strong><br>同目录下可新建配置文件<code>application.yml</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><font color="#FF0000">YAML</font>（YAML Ain’t Markup Language）不仅是一个标记语言。</p>
</li>
<li><p><font color="#FF0000">标记语言</font>：以前的配置文件大多都使用的是<code>xxxx.xml</code>文件；  </p>
</li>
<li><p><font color="#FF0000">YAML</font>：以数据为中心，比json、xml等更适合做配置文件。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><font color="#FF0000">XML</font>：需要更多标签。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>key: value</code>：表示一对键值对（空格必须有）；空格作为缩进以控制层级。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">   port: 8081</span><br><span class="line">   path: &#x2F;hello</span><br></pre></td></tr></table></figure>

<h2 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h2><ul>
<li><strong>字面量：普通的值（数字，字符串，布尔）</strong>  <ul>
<li><font color="#FF0000">字符串不用加引号；  双引有用单无用；</font></li>
<li>双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思；<br><code>name: &quot;tom \n jane&quot;</code>  输出：<code>tom 换行 jane</code>  </li>
<li>单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据；<br><code>name: ‘tom \n jane’</code> 输出：<code>tom \n jane</code></li>
</ul>
</li>
<li><strong>对象/Map</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">friends:</span><br><span class="line">    lastName: zhangsan</span><br><span class="line">    age: 20</span><br><span class="line">friends: &#123;lastName: zhangsan,age: 18&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>List/Set</strong>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pets:</span><br><span class="line">‐ cat</span><br><span class="line">‐ dog</span><br><span class="line">‐ pig</span><br><span class="line">pets: [cat,dog,pig]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h1><h2 id="本节要点"><a href="#本节要点" class="headerlink" title="本节要点"></a>本节要点</h2><img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-12.png" class>

<h2 id="Dog类"><a href="#Dog类" class="headerlink" title="Dog类"></a>Dog类</h2><p><code>com.example.spring_boot_04_config.bean</code>下新建Dog类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure>

<p><code>Alt + Insert</code>键入所有变量的<code>getter</code>和<code>setter</code>，以及<code>toString()</code>。  </p>
<h2 id="用-ConfigurationProperties将Person类与配置文件属性绑定"><a href="#用-ConfigurationProperties将Person类与配置文件属性绑定" class="headerlink" title="用@ConfigurationProperties将Person类与配置文件属性绑定"></a>用<font color="#FF0000">@ConfigurationProperties</font>将Person类与<font color="#FF0000">配置文件属性</font>绑定</h2><p><code>com.example.spring_boot_04_config.bean</code>下新建Person类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment">* prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>
<p><code>Alt + Insert</code>键入所有变量的<code>getter</code>和<code>setter</code>，以及<code>toString()</code>。</p>
<ul>
<li><p><font color="#FF0000">@ConfigurationProperties(绑定配置文件的属性到类的属性)</font>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定。<br>但由于只有这个组件是容器中的组件，才能容器提供的<code>@ConfigurationProperties</code>功能，因此，需要先把Person设置为容器中的组件，也就是<code>@Component</code>的功能。  </p>
</li>
<li><p><font color="#FF0000">@Component(绑定类到容器)</font>：把普通POJO实例化到Spring容器中，相当于配置文件中的 <code>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</code>。<br>泛指各种组件，就是说当我们的类（此处的Person类）不属于各种归类的时候（不属于<code>@Controller</code>、<code>@Services</code>等的时候），我们就可以使用<code>@Component</code>来标注这个类。  </p>
</li>
<li><p><font color="#FF0000">POJO</font>：普通的JavaBeans(简单的实体类)，具有一部分<code>getter</code>/<code>setter</code>方法。  </p>
</li>
</ul>
<h2 id="用-Value将Person类与指定属性绑定"><a href="#用-Value将Person类与指定属性绑定" class="headerlink" title="用@Value将Person类与指定属性绑定"></a>用<font color="#FF0000">@Value</font>将Person类与<font color="#FF0000">指定属性</font>绑定</h2><p><code>com.example.spring_boot_04_config.bean</code>下新建Person类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "person")</span></span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">  * &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#</span></span><br><span class="line"><span class="comment">  &#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">  * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">  <span class="comment">//@Email</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;person.lastName&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"true"</span>)</span><br><span class="line">  <span class="keyword">private</span> Boolean boss;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">  <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h2 id="依赖写入pom-xml文件"><a href="#依赖写入pom-xml文件" class="headerlink" title="依赖写入pom.xml文件"></a>依赖写入pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!‐‐导入配置文件处理器，配置文件进行绑定就会有提示‐‐</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐configuration‐processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="全局配置文件：application-yml"><a href="#全局配置文件：application-yml" class="headerlink" title="全局配置文件：application.yml"></a>全局配置文件：application.yml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person:</span><br><span class="line">    lastName: hello</span><br><span class="line">    age: 18</span><br><span class="line">    boss: false</span><br><span class="line">    birth: 2017&#x2F;12&#x2F;12</span><br><span class="line">    maps: &#123;k1: v1,k2: 12&#125;</span><br><span class="line">    lists:</span><br><span class="line">      - tom</span><br><span class="line">      - jane</span><br><span class="line">    dog:</span><br><span class="line">      last-name: 小狗</span><br><span class="line">      age: 12</span><br></pre></td></tr></table></figure>

<p>由于<code>pom.xml</code>文件中存在配置文件处理器，因此即使使用的是<code>last-name</code>而不是<code>lastName</code>，依然能成功绑定。   </p>
<h2 id="Tests文件"><a href="#Tests文件" class="headerlink" title="Tests文件"></a>Tests文件</h2><p>在<code>test</code>目录下的<code>SpringBoot04ConfigApplicationTests</code>文件中，更新下列代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04ConfigApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><font color="#FF0000">@Autowired(将容器中的类装配给指定对象)</font>：使用<code>@Autowired</code>时，首先在容器中查询对应类型的bean（因此该类需要提前用<code>@Component</code>将类放到容器中），将该bean装配给<code>@Autowired</code>指定的数据。</p>
<ul>
<li><p>随后进行测试，用<code>@ConfigurationProperties</code>的Person类成功输出<font color="#FF0000">配置文件中</font>设好的数据：  </p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-1.png" class>
</li>
<li><p>随后进行测试，用<code>@Value</code>的Person类则输出Person类中<font color="#FF0000">指定的</font>数据：  </p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-2.png" class>

</li>
</ul>
</li>
</ul>
<h2 id="其他业务逻辑"><a href="#其他业务逻辑" class="headerlink" title="其他业务逻辑"></a>其他业务逻辑</h2><p>写一个controller类,用<code>@Value</code>获取配置文件中的某项值：  </p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-3.png" class>  
<p>随后在web应用中输出：  </p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-4.png" class> 

<h2 id="用-PropertySource与person-properties文件代替全局配置文件"><a href="#用-PropertySource与person-properties文件代替全局配置文件" class="headerlink" title="用@PropertySource与person.properties文件代替全局配置文件"></a>用<font color="#FF0000">@PropertySource</font>与<font color="#FF0000">person.properties</font>文件代替全局配置文件</h2><p>考虑到全局配置文件不宜过度冗长，因此考虑使用多个配置文件<code>xxx.properties</code>替代。<br>如将全局配置文件<code>application.properties</code>与<code>application.yml</code>中关于person的属性注释掉后，将下述需要的属性写入<code>resources</code>下的一个配置文件<code>person.properties</code>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.lastName=Allen</span><br><span class="line">person.age=<span class="number">18</span></span><br><span class="line">person.boss=<span class="keyword">false</span></span><br><span class="line">person.birth=<span class="number">2017</span>/<span class="number">12</span>/<span class="number">12</span></span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=<span class="number">12</span></span><br><span class="line">person.lists=tom,jane</span><br><span class="line">person.dog.last-name=小狗</span><br><span class="line">person.dog.age=<span class="number">13</span></span><br></pre></td></tr></table></figure>

<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-5.png" class> 

<p>并在person类中用<font color="#FF0000">@PropertySource</font>加载指定的配置文件<code>person.properties</code>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment">* prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<p>测试一下，成功注入：  </p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-6.png" class>  

<h2 id="用-ImportResource导入Spring的配置文件"><a href="#用-ImportResource导入Spring的配置文件" class="headerlink" title="用@ImportResource导入Spring的配置文件"></a>用<font color="#FF0000">@ImportResource</font>导入<font color="#FF0000">Spring的配置文件</font></h2><p>首先创建一个HelloService组件：</p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-8.png" class>  
<p>随后创建以一个Spring的配置文件<code>beans.xml</code>：</p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-7.png" class> 
<p>在配置文件<code>beans.xml</code>中加入HelloService组件：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"HelloService"</span> <span class="attr">class</span>=<span class="string">"com.example.spring_boot_04_config.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>并在<code>Test</code>文件中测试Spring IOC容器中此时能否自动识别配置文件中的组件：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04ConfigApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ioc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloServive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(ioc.containsBean(<span class="string">"HelloService"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>返回false，说明此时是无法自动识别的。<br>也就是说Spring Boot里面既没有Spring的配置文件，我们自己编写的Spring配置文件也不能自动识别。<br>想让Spring的配置文件生效，需要使用<font color="#FF0000">@ImportResource</font>标注在一个主程序或者配置类上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04ConfigApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>此时成功返回true。</p>
<h2 id="【推荐用法】用-Bean给容器中添加组件，用配置类来替代Spring的配置文件"><a href="#【推荐用法】用-Bean给容器中添加组件，用配置类来替代Spring的配置文件" class="headerlink" title="【推荐用法】用@Bean给容器中添加组件，用配置类来替代Spring的配置文件"></a>【推荐用法】用<font color="#FF0000">@Bean</font>给容器中添加组件，用<font color="#FF0000">配置类</font>来替代Spring的配置文件</h2><p>首先创建一个专门的配置类：  </p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-9.png" class>   
<p>使用<font color="#FF0000">@Configuration</font>声明当前类（即MyAppConfig）是一个配置类，用<font color="#FF0000">@Bean</font>将方法的返回值（即HelloService()）作为组件添加到容器中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">HelloService2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时可以使上一小节的Spring配置文件<code>beans.xml</code>失效，即注释掉在主程序或者配置类上的<code>@ImportResource</code>标注：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">\\<span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>此时配置类就完全取代了上一节中Spring配置文件<code>beans.xml</code>的作用了：</p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-10.png" class>

<h1 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h1><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure>

<h2 id="占位符获取之前配置的值"><a href="#占位符获取之前配置的值" class="headerlink" title="占位符获取之前配置的值"></a>占位符获取之前配置的值</h2><p>占位符获取之前配置的值，如果没有配置过可用:来指定默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.last‐name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.birth=<span class="number">2017</span>/<span class="number">12</span>/<span class="number">15</span></span><br><span class="line">person.boss=<span class="keyword">false</span></span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=<span class="number">14</span></span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=<span class="number">15</span></span><br></pre></td></tr></table></figure>

<h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><h2 id="多Profile文件"><a href="#多Profile文件" class="headerlink" title="多Profile文件"></a>多Profile文件</h2><p>我们在主配置文件编写的时候，文件名可以是<code>application-{profile}.properties/yml</code>。如：<br><code>application.properties/yml</code>（默认使用）<br><code>application-dev.properties/yml</code>（需要激活）<br><code>application-prod.properties/yml</code>（需要激活）    </p>
<h2 id="yml支持多文档块方式"><a href="#yml支持多文档块方式" class="headerlink" title="yml支持多文档块方式"></a>yml支持多文档块方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev #此时先用application-dev.properties&#x2F;yml的配置，后用文档块dev中的8083</span><br><span class="line">#    active: prod</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8083</span><br><span class="line">spring:</span><br><span class="line">  profiles: dev</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8084</span><br><span class="line">spring:</span><br><span class="line">  profiles: prod #指定属于哪个环境</span><br></pre></td></tr></table></figure>

<h2 id="激活指定profile"><a href="#激活指定profile" class="headerlink" title="激活指定profile"></a>激活指定profile</h2><ul>
<li><p>在最高级别的配置文件中指定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8081</span>            <span class="comment">//不生效</span></span><br><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure>
<p>此时生效的是<code>application-dev.properties/yml</code>的配置，后是<code>其他配置文件(按优先级)中dev文档块</code>的配置。<br>其他级别配置文件以此类推。</p>
</li>
<li><p>Jar包命令行参数：  </p>
<ul>
<li>在炸包后，在命令行中对包执行：  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-<span class="number">02</span>-config-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure></li>
<li>或者在Run/Debug Configuration中将arguments设置为：<br><code>--spring.profiles.active=prod</code><img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-13.png" class>  </li>
<li>实现在测试的时候，配置传入命令行参数。此时生效的是<code>application-prod.properties/yml</code>的配置，后是<code>其他配置文件(按优先级)中prod文档块</code>的配置。 </li>
</ul>
</li>
<li><p>虚拟机参数:<br>在Run/Debug Configuration中将VM options设置为：<br><code>-Dspring.profiles.active=dev</code><br>此时生效的是<code>application-dev.properties/yml</code>的配置，后是<code>其他配置文件(按优先级)中dev文档块</code>的配置。</p>
</li>
</ul>
<h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><ul>
<li>Spring Boot启动会扫描以下位置的<code>application.properties/yml</code>文件作为Spring Boot的默认配置文件。<br>–file:./config/<br>–file:./<br>–classpath:/config/<br>–classpath:/<br>优先级<font color="#FF0000">由高到底</font>，高优先级的配置会覆盖低优先级的配置。即下图所示：  <img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-14.png" class> </li>
<li>SpringBoot会从这四个位置全部加载主配置文件，<font color="#FF0000">互补配置</font>。<br>如在上图的4中，写入如下配置：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8081</span></span><br><span class="line">#配置项目的访问路径</span><br><span class="line">server.servlet.context-path=/boot02</span><br></pre></td></tr></table></figure>
在上图的1中，写入如下配置：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8084</span></span><br></pre></td></tr></table></figure>
随后写一个HelloController类，最后只能在 <a href="http://localhost:8084/boot02/hello" target="_blank" rel="noopener">http://localhost:8084/boot02/hello</a> 中访问，端口的最高级配置在文件1中，访问路径的最高级配置在文件4中。</li>
<li>使用<font color="#FF0000">命令行参数</font>的形式，启动项目的时候来<font color="#FF0000">指定任意位置的配置文件</font>。<br>项目打包好以后，我们可以重构一个配置文件，放到任意位置。随后用命令行参数，在启动项目的时候来指定配置文件的新位置：  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-<span class="number">02</span>-config-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --spring.config.location=G:/application.properties</span><br></pre></td></tr></table></figure>
此时，指定的配置文件和默认加载的这些配置文件共同起作用，形成互补配置。</li>
</ul>
<h2 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h2><p>SpringBoot也可以从以下位置加载配置；优先级从高到低，高优先级的配置覆盖低优先级的配置；所有的配置会形成互补配置。  </p>
<ul>
<li><p><strong>命令行参数</strong><br>所有的配置都可以在命令行上进行指定：  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-<span class="number">02</span>-config-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --server.port=<span class="number">8087</span> --server.servlet.context-<span class="built_in">path</span>=/abc</span><br></pre></td></tr></table></figure>
<p>采用<code>--配置项=值</code>，多个配置用空格分开。<br>此时配置已更新：</p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-15.png" class> </li>
<li><p><strong>来自java:comp/env的JNDI属性</strong>  </p>
</li>
<li><p><strong>Java系统属性（System.getProperties()）</strong>  </p>
</li>
<li><p><strong>操作系统环境变量</strong>   </p>
</li>
<li><p><strong>RandomValuePropertySource配置的random.*    属性值</strong> </p>
</li>
<li><p><strong>由jar包外向jar包内进行寻找：</strong>  </p>
<ul>
<li><p>优先加载带profile：  </p>
<ul>
<li>jar包外部的<code>application-{profile}.properties</code>或<code>application.yml(带spring.profile)</code>配置文件；  </li>
<li>jar包内部的<code>application-{profile}.properties</code>或<code>application.yml(带spring.profile)</code>配置文件。   </li>
</ul>
</li>
<li><p>再来加载不带profile：  </p>
<ul>
<li>jar包外部的<code>application.properties</code>或<code>application.yml(不带spring.profile)</code>配置文件；   </li>
<li>jar包内部的<code>application.properties</code>或<code>application.yml(不带spring.profile)</code>配置文件。  </li>
</ul>
</li>
<li><p>同一路径下，下述带spring.profile的application.yml先发挥作用，后是application.properties，最后是application-dev.properties</p>
<img src="/2020/01/28/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/pasted-16.png" class> </li>
</ul>
</li>
<li><p><strong>@Configuration注解类上的@PropertySource</strong> </p>
</li>
<li><p><strong>通过SpringApplication.setDefaultProperties指定的默认属性</strong><br>所有支持的配置加载来源。</p>
</li>
</ul>
<h2 id="Spring-Boot自动配置原理"><a href="#Spring-Boot自动配置原理" class="headerlink" title="Spring Boot自动配置原理"></a>Spring Boot自动配置原理</h2><p>精髓：</p>
<ul>
<li>SpringBoot启动会加载大量的自动配置类;  </li>
<li>我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；  </li>
<li>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值。</li>
</ul>
<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>关于Spring Boot配置文件的使用，也可以查看其他关于相关文章。<br><a href="https://www.bilibili.com/video/av38657363?p=18" target="_blank" rel="noopener">Spring Boot自动配置原理B站视频</a><br><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">Spring Boot官方文档：配置文件部分</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>配置文件</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>YML</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】SpringBoot安装及使用</title>
    <url>/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>SpringBoot创建<font color="#FF0000">独立的Spring</font>应用程序；<font color="#FF0000">简化Maven配置</font>，开箱即用；<font color="#FF0000">内嵌式容器Tomcat</font>简化Web项目，没有冗余代码生成和XML配置的要求。<br>本章主要目标完成SpringBoot基础项目的构建，并且实现一个简单的http请求处理，即<font color="#FF0000">浏览器发送一个hello请求，服务器接收请求并处理，响应一个Hello World字符串</font>。</p>
<a id="more"></a>

<h1 id="HelloWorld入门"><a href="#HelloWorld入门" class="headerlink" title="HelloWorld入门"></a>HelloWorld入门</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul>
<li><strong>安装JDK</strong></li>
<li><strong>安装Maven</strong></li>
<li><strong>安装IntelliJ IDEA</strong></li>
</ul>
<h2 id="使用Spring-Initializr创建SpringBoot项目"><a href="#使用Spring-Initializr创建SpringBoot项目" class="headerlink" title="使用Spring Initializr创建SpringBoot项目"></a>使用Spring Initializr创建SpringBoot项目</h2><ul>
<li><p><strong>使用Spring Initializr创建</strong>  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-1.png" class>
</li>
<li><p><strong>在Artifact中给项目命名</strong>  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-4.png" class>
</li>
<li><p><strong>选择web项目</strong>  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-5.png" class>  
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-6.png" class>
</li>
<li><p><strong>创建完成</strong><br>点击图中第七行的运行按钮：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-38.png" class>  
<p>运行成功：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-8.png" class>  
<p>此时访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，可以出现文字了：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-10.png" class>



</li>
</ul>
<h2 id="使用Maven创建SpringBoot项目"><a href="#使用Maven创建SpringBoot项目" class="headerlink" title="使用Maven创建SpringBoot项目"></a>使用Maven创建SpringBoot项目</h2><ul>
<li><p><strong>使用Maven创建</strong>  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-18.png" class>
</li>
<li><p><strong>导入spring boot相关依赖</strong><br>从Spring官网的<a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">guides</a>或<a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">Getting start</a>中复制如下到<code>pom.xml</code>文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-19.png" class>
</li>
<li><p><strong>编写主程序</strong><br>新建包和主程序：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-20.png" class>  
<p>主程序用于启动Spring Boot应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  用SpringBootApplication来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02HelloworldApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动spring应用</span></span><br><span class="line">        SpringApplication.run(SpringBoot02HelloworldApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-21.png" class>
</li>
<li><p><strong>创建完成</strong><br>点击图中第十行的运行按钮： </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-37.png" class>   
<p>运行成功：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-8.png" class>    
<p>此时访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，可以出现文字了：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-10.png" class>  

</li>
</ul>
<h2 id="使用Spring官网创建SpringBoot项目"><a href="#使用Spring官网创建SpringBoot项目" class="headerlink" title="使用Spring官网创建SpringBoot项目"></a>使用Spring官网创建SpringBoot项目</h2><ul>
<li><p><strong>利用官网创建</strong><br>在Spring官网的<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>下，选择快速创建：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-31.png" class>   
<p>在Artifact中给项目命名：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-30.png" class>   
<p>在依赖中勾选Spring Web，并选择生成:  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-33.png" class> 
</li>
<li><p><strong>解压到本地后，导入到Idea中，创建完成</strong><br>点击图中第七行的运行按钮：</p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-35.png" class>   
<p>运行成功：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-8.png" class>    
<p>此时访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，可以出现文字了：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-10.png" class> 

</li>
</ul>
<h2 id="写一个controller查看前后端交互信息"><a href="#写一个controller查看前后端交互信息" class="headerlink" title="写一个controller查看前后端交互信息"></a>写一个controller查看前后端交互信息</h2><ul>
<li><p><strong>主程序的同级目录中new一个package</strong>  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-12.png" class> 
</li>
<li><p><strong>controller的目录下new一个class</strong>  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-13.png" class> 
</li>
<li><p><strong>在类中添加注解方法一</strong><br>为HelloController类添加<font color="#FF0000">RestController</font>注解，向SpringBoot说明这是用于响应网络请求的类，其中@RestController就是<font color="#FF0000">@Controller + @ResponseBody </font>注解的综合，后无需再加<font color="#FF0000">ResponseBody </font>；<br>通过<font color="#FF0000">GetMapping/RequestMapping</font>注解，向SpringBoot说明可以响应/hello的Get请求。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  通过RestController注解，向SpringBoot说明这是一个响应网络请求的类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      通过GetMapping/RequestMapping注解，向SpringBoot说明可以应/hello的Get请求。</span></span><br><span class="line"><span class="comment">      由于类使用的RestController就是Controller + ResponseBody，因此返回的无需加@ResponseBody注解。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-24.png" class> 
</li>
<li><p><strong>在类中添加注解方法二</strong><br>为HelloController类添加<font color="#FF0000">Controller</font>注解，向SpringBoot说明这是用于响应网络请求的类，后<font color="#FF0000">需加ResponseBody</font>；<br>通过<font color="#FF0000">GetMapping/RequestMapping + ResponseBody</font>注解，向SpringBoot说明可以响应/hello的Get请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-22.png" class>  
</li>
<li><p><strong>运行</strong><br>再次点击图中第七行的运行按钮： </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-38.png" class>  
<p>此时访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a> ，可以出现文字了：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-15.png" class>


</li>
</ul>
<h2 id="将应用打包成一个可执行的jar包"><a href="#将应用打包成一个可执行的jar包" class="headerlink" title="将应用打包成一个可执行的jar包"></a>将应用打包成一个可执行的jar包</h2><ul>
<li><p><strong>使用maven方法需手动添加插件到pom.xml文件</strong><br>将<a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">guides</a>中pom.xml中的相关内容，写入依赖之后：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>在右侧的maven中找到package的位置，双击生成jar包</strong>   </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-26.png" class>  
<p>若此处报错，注意检查User settings file的路径：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-25.png" class>  
<p>得到的jar包在target目录下：  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-27.png" class>
</li>
<li><p><strong>直接执行jar包</strong><br>扔到任意路径下后，在cmd的该路径下，执行<code>java -jar 包名</code>成功即完成炸包。  </p>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-28.png" class>

</li>
</ul>
<p>上一篇文章介绍了Spring Boot的安装及使用一个简单的web应用。本文主要介绍了这个Hello World请求的细节实现。</p>
<h1 id="Hello-World探究"><a href="#Hello-World探究" class="headerlink" title="Hello World探究"></a>Hello World探究</h1><h2 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h2><ul>
<li><p><strong>父项目</strong><br>在<code>pom.xml</code>中可以得到Spring Boot场景启动器的父项目：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对上述<code>spring-boot-starter-parent</code>，使用<code>ctrl+Enter</code>，跳转到该父项目的父项目： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其位于文件<code>spring-boot-starter-parent-2.2.4.RELEASE.pom</code>中。</p>
</li>
<li><p><strong>保存的依赖</strong><br>在<code>pom.xml</code>中可以得到Spring Boot场景启动器的依赖，  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>spring-boot-starter</code> <code>-web</code>：Spring Boot场景启动器；帮助导入web模块正常运行所需组件。<br>Spring Boot将所有功能场景都抽取出来，做成一个个starters（启动器），只要在项目里引用相关starter就可以把相关场景的所有依赖导入进来。</p>
</li>
</ul>
<h2 id="主程序类-主入口类"><a href="#主程序类-主入口类" class="headerlink" title="主程序类/主入口类"></a>主程序类/主入口类</h2><ul>
<li>@SpringBootApplication<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  用SpringBootApplication来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;font color=#FF0000&gt;@SpringBootApplication&lt;/font&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02HelloworldApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动spring应用</span></span><br><span class="line">        SpringApplication.run(SpringBoot02HelloworldApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<font color="#FF0000">@用SpringBootApplication来标注一个主程序类</font>：用Spring Boot应用来标注某个类，说明这个类是Spring Boot应用的主配置类，Spring Boot就应该运行这个类的main方法来启动应用。  <pre><code class="java"><span class="meta">@Target</span>({ElementType.TYPE})
<span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)
<span class="meta">@Documented</span>
<span class="meta">@Inherited</span>
<span class="meta">@SpringBootConfiguration</span>
<span class="meta">@EnableAutoConfiguration</span>
<span class="meta">@ComponentScan</span>(
    excludeFilters = {<span class="meta">@Filter</span>(
    type = FilterType.CUSTOM,
    classes = {TypeExcludeFilter<span class="class">.<span class="keyword">class</span>}</span>
<span class="class">), @<span class="title">Filter</span>(</span>
<span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,
    classes = {AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>}</span>
<span class="class">)}</span>
<span class="class">)</span>
<span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>{</code></pre>
<ul>
<li>@SpringBootConfiguration<br><font color="#FF0000">@SpringBootConfigurations是Spring Boot的配置类/配置文件</font>：<br>标注在某个类上，表示这是一个Spring Boot的配置类；<br>需要用@Configuration来标注这个注解。  </li>
<li>@EnableAutoConfiguration<br><font color="#FF0000">@EnableAutoConfiguration开启自动配置功能</font>：<br>以前我们需要配置的东西，Spring Boot帮我们自动配置；<br>@EnableAutoConfiguration告诉Spring Boot要开启自动配置功能，这样才能生效；   <pre><code class="java"><span class="meta">@AutoConfigurationPackage</span>
<span class="meta">@Import</span>({AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>})</span>
<span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>{</code></pre>
<ul>
<li>@AutoConfigurationPackage<br><font color="#FF0000">@AutoConfigurationPackage</font>：自动配置包；  <ul>
<li><font color="#FF0000">@Import({Registrar.class})</font>：<br>Spring的底层注解@Import，给容器中导入一个组件；<br>导入的组件由Registrar.class将主配置类（@SpringBootApplication）所在包及其所有子包扫描到Spring容器。  </li>
</ul>
</li>
<li>@Import({AutoConfigurationImportSelector.class})<br><font color="#FF0000">@Import({AutoConfigurationImportSelector.class})</font>：给容器中导入组件；<br>AutoConfigurationImportSelector.class：导入哪些组件的选择器；<br>将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；<br>会给容器中导入非常多的自动配置类（XXXAutoConfiguration）就是给这容器中导入这个场景所需要的全部组件，并配置好这些组件。  <img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-40.png" class>  
有了自动配置了就免去了手动编写配置注入功能组件等的工作；<br>其中有：<br><code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, ClassLoader);</code>  </li>
</ul>
</li>
</ul>
</li>
<li>可以看出Spring在类路径<code>META-INF/spring.factories</code>下获取<code>EnableAutoConfiguration</code>指定的值。<font color="#FF0000">将这些值作为自动配置类导入到容器中，自动配置类就自动帮助我们完成配置工作。</font></li>
</ul>
<img src="/2020/01/24/%E3%80%90SpringBoot%E3%80%91SpringBoot%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/pasted-2.png" class> 

<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>关于Spring Boot的安装使用，也可以查看其他关于Spring Boot相关文章。<br><a href="https://www.bilibili.com/video/av38657363?p=4" target="_blank" rel="noopener">SpringBoot_2019权威教程_spring boot_springboot核心篇+springboot整合篇</a><br><a href="https://www.cnblogs.com/Sarah-Strawberry/p/11088708.html" target="_blank" rel="noopener">搭建一个入门springboot工程（Spring Initializr创建方式）</a><br><a href="https://www.cnblogs.com/anywherego/p/9591706.html" target="_blank" rel="noopener">SpringBoot实战（一）HelloWorld</a><br><a href="http://blog.didispace.com/spring-boot-learning-1/" target="_blank" rel="noopener">Spring Boot快速入门</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Spring Boot 安装教程</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring Boot 安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Hexo+github搭建github博客</title>
    <url>/2020/01/22/%E3%80%90Hexo%E3%80%91Hexo-github%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。方便部署到github上搭建博客。  </p>
<a id="more"></a>

<h1 id="创建个人博客"><a href="#创建个人博客" class="headerlink" title="创建个人博客"></a>创建个人博客</h1><h2 id="在gitHub上new一个repository"><a href="#在gitHub上new一个repository" class="headerlink" title="在gitHub上new一个repository"></a>在gitHub上new一个repository</h2><img src="/2020/01/22/%E3%80%90Hexo%E3%80%91Hexo-github%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/pasted-0.png" class title="This is an test image">

<h2 id="git-clone将创建的repository到本地"><a href="#git-clone将创建的repository到本地" class="headerlink" title="git clone将创建的repository到本地"></a>git clone将创建的repository到本地</h2><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul>
<li><strong><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">官网下载</a></strong>  </li>
<li><strong>配置环境变量：</strong><br>系统变量<code>NODE_PATH</code>，即压缩后的路径，如，<code>D:\NodeJS</code>。<br>系统变量<code>PATH</code>，新增，<code>%NODE_PATH%</code>。  </li>
<li><strong>检测node.js和npm是否安装成功</strong>：<br>输入<code>node -v</code>和<code>npm -v</code>。  </li>
</ul>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li><strong>下载</strong><br>自定义路径，如，<code>D:\hexo</code> 中打开<code>git bash</code>，输入<code>npm install -g hexo-cli</code>。<br>注：cmd中没有成功。</li>
<li><strong>配置环境变量：</strong><br>系统变量<code>PATH</code>，新增，如，<code>D:\hexo\node_modules\.bin</code>。    </li>
<li><strong>检测hexo是否安装成功</strong>：<br>输入<code>hexo -v</code>。  </li>
</ul>
<h1 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h1><h2 id="初始化博客框架"><a href="#初始化博客框架" class="headerlink" title="初始化博客框架"></a>初始化博客框架</h2><p>在<code>E:\cymbym.github.io</code>目录下，输入<code>hexo init</code>，会自动生成本地文件。</p>
<h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><ul>
<li><strong>设置站点名、作者昵称和站点描述等</strong><br>打开根目录下的<code>_config.yml</code>修改即可。</li>
<li><strong>NexT主题的安装</strong><br>根目录下输入<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>即可。</li>
<li><strong>NexT主题的安装</strong><br>根目录下的<code>_config.yml</code>,查找<code>theme</code>字段，将字段改为<code>theme: next</code>。<a href="https://blog.csdn.net/weixin_39345384/article/details/80785373" target="_blank" rel="noopener">更多可参考</a>。 </li>
</ul>
<h2 id="增加search功能"><a href="#增加search功能" class="headerlink" title="增加search功能"></a>增加search功能</h2><ul>
<li><p><strong>安装hexo-generator-searchdb</strong><br>项目根目录下输入<code>npm install hexo-generator-searchdb --save</code>  </p>
</li>
<li><p><strong>增加根目录_config.yml文档中search的配置</strong><br>文档末输入 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">	path: search.xml</span><br><span class="line">	field: post</span><br><span class="line">	format: html</span><br><span class="line">	limit: 10000</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改theme/next目录下_config.yml文档中local_search的配置</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">	enable: true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="设置预览摘要"><a href="#设置预览摘要" class="headerlink" title="设置预览摘要"></a>设置预览摘要</h2><p>只要在文章中加上<code>&lt;!--more--&gt;</code>标记 ，该标记以后部分就不在显示了。  </p>
<h2 id="将网站部署到个人的GitHub-Pages上"><a href="#将网站部署到个人的GitHub-Pages上" class="headerlink" title="将网站部署到个人的GitHub Pages上"></a>将网站部署到个人的GitHub Pages上</h2><ul>
<li><p><strong>安装hexo-deployer-git</strong><br>项目根目录下输入<code>npm install hexo-deployer-git --save</code>  </p>
</li>
<li><p><strong>增加根目录_config.yml文档中deploy的配置</strong><br>文档末输入 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repository: https:&#x2F;&#x2F;github.com&#x2F;cymbym&#x2F;cymbym.github.io</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将本地的静态网页部署到服务器上</strong><br><code>hexo deploy</code>/<code>hexo d</code></p>
</li>
</ul>
<h2 id="修改与发布"><a href="#修改与发布" class="headerlink" title="修改与发布"></a>修改与发布</h2><ul>
<li><strong>清空缓存</strong><br><code>hexo clean</code>/<code>hexo cl</code>  </li>
<li><strong>生成静态文件</strong><br><code>hexo generate</code>/<code>hexo g</code></li>
<li><strong>启动服务器，本地预览博客效果</strong><br><code>hexo server</code>/<code>hexo s</code><br>在 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 中访问。</li>
</ul>
<h1 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h1><h2 id="原始方法"><a href="#原始方法" class="headerlink" title="原始方法"></a>原始方法</h2><ul>
<li><strong>创建新博文</strong><br><code>hexo new &lt;title&gt;</code><br>后，<code>source/_posts</code>目录下会生成相应的.md文件，接下来我们可以编辑该文件。  </li>
<li><strong>关于在博文中插入图片</strong><br>可以把图片统一放置在<code>source/images</code>目录下，然后在使用时用下述方式引用：  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure>
后续介绍其他方法。  </li>
</ul>
<h2 id="安装hexo-admin插件编辑博文"><a href="#安装hexo-admin插件编辑博文" class="headerlink" title="安装hexo-admin插件编辑博文"></a>安装hexo-admin插件编辑博文</h2><ul>
<li><p><strong>安装插件</strong><br>项目根目录下输入<code>npm install --save hexo-admin</code></p>
</li>
<li><p><strong>启动服务器</strong><br><code>hexo server -d</code><br>在 <a href="http://localhost:4000/admin/" target="_blank" rel="noopener">http://localhost:4000/admin/</a> 中访问。</p>
</li>
<li><p><strong>修改根目录_config.yml文档中deploy的配置</strong><br>文档末输入 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin:</span><br><span class="line">    deployCommand: hexo-publish.bat</span><br></pre></td></tr></table></figure></li>
<li><p><strong>创建bat文件</strong><br>项目根目录下新建<code>hexo-publish.bat</code>文件，文件内容如下：</p>
<pre><code>hexo g -d
</code></pre></li>
<li><p><strong>关于在博文中插入图片方法（但我失败了）</strong><br>hexo admin可以直接复制图片粘贴，然后自动下载到<code>source/images</code>目录并重命名。但在Windows中粘贴后会出现裂图。这时就需要手动把括号中的前后两个斜杠去掉，就能正常显示，如：  </p>
<img src="/2020/01/22/%E3%80%90Hexo%E3%80%91Hexo-github%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/pasted-2.png" class>
</li>
<li><p><strong>上传</strong><br>编辑完毕后，就可以点击Deploy。</p>
</li>
</ul>
<h2 id="安装hexo-asset-image上传图片"><a href="#安装hexo-asset-image上传图片" class="headerlink" title="安装hexo-asset-image上传图片"></a>安装hexo-asset-image上传图片</h2><ul>
<li><strong>安装插件</strong><br>项目根目录下输入<code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></li>
<li><strong>修改根目录_config.yml文档中的配置</strong><br>在根目录下配置文件<code>_config.yml</code>中有<code>post_asset_folder:false</code>改为<code>true</code>。</li>
<li><strong>创建与博文同名文件夹</strong><br>运行<code>hexo new &quot;文章名称&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了<code>文章名称.md</code>文件还有一个同名的文件夹，把图片放入该文件夹。</li>
<li><strong>插入图片</strong><br>随后用下述命令插入图片:<pre><code>{% asset_img test.jpg This is an test image %}
</code></pre>
其中<code>test.jpg</code>就是引用的图片，后面的<code>This is an test image</code>是图片描述。  </li>
</ul>
<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>关于主题的使用，也可以查看其他关于Hexo相关文章。<br><a href="http://wangwlj.com/2017/09/09/blog-opti/" target="_blank" rel="noopener">Hexo搭建的GitHub博客之优化</a><br><a href="https://www.jianshu.com/p/e4db4f7ed45f" target="_blank" rel="noopener">Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</a><br><a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">Hexo使用攻略-添加分类及标签</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Cymbym</title>
    <url>/2020/01/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://cymbym.github.io/" target="_blank" rel="noopener">Cymbym</a>! </p>
<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>XINBIN SHEN received the B.S. degree in communication engineering from the Beijing University of Posts and Telecommunications, China, where he is currently pursuing the M.S. degree in electronic and communication engineering. His current research interests include Wi-Fi sensing, machine learning, and deep learning.</p>
<h2 id="News"><a href="#News" class="headerlink" title="News"></a>News</h2><p>Jul., 2018: Joined Beijing Key Laboratory of Network System Architecture and Convergence, Beijing University of Posts and Telecommunications. Started doing research on Wi-Fi sensing.<br>Jun., 2018: Graduated from Beijing University of Posts and Telecommunications.</p>
<h2 id="Publications"><a href="#Publications" class="headerlink" title="Publications"></a>Publications</h2><p>WiRIM: Resolution Improving Mechanism for Human Sensing With Commodity Wi-Fi<br>WiRoI: Spatial Region of Interest Human Sensing with Commodity WiFi</p>
]]></content>
  </entry>
</search>
